Loaded MCU 'EBB' 108 commands (v0.12.0-102-g9f41f53c / gcc: (15:12.2.rel1-1) 12.2.1 20221205 binutils: (2.40-2+18+b1) 2.40)
MCU 'EBB' config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CANBUS_FREQUENCY=500000 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_CAN=PB0,PB1 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Configured MCU 'EBB' (1024 moves)
===== Config file =====
[virtual_sdcard]
path = /home/blackaxis/Ender3_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[respond]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	M400
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
	{% set retract = client.cancel_retract|default(1)|abs %}
	{% set BED_TEMP = params.BED|default(60)|float %}
	{% set TOOL_TEMP = params.EXTRUDER|default(175)|float %}
	
	{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
	else "X=" ~ client.park_at_cancel_x %}
	{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
	else "Y=" ~ client.park_at_cancel_y %}
	{% set custom_park = park_x|length > 0 or park_y|length > 0 %}
	
	
	{% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
	{% endif %}
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	{client.user_cancel_macro|default("")}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
	{% set restore = False if printer.toolhead.extruder == ''
	else True  if params.RESTORE|default(1)|int == 1 else False %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	{client.user_pause_macro|default("")}
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	{% set runout_resume = True if client.runout_sensor|default("") == ""
	else True if not printer[client.runout_sensor].enabled
	else printer[client.runout_sensor].filament_detected %}
	{% set can_extrude = True if printer.toolhead.extruder == ''
	else printer[printer.toolhead.extruder].can_extrude %}
	{% set do_resume = False %}
	{% set prompt_txt = [] %}
	
	
	{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	{% if last_extruder_temp.restore %}
	
	RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
	M109 S{last_extruder_temp.temp}
	{% set do_resume = True %}
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	{% if runout_resume %}
	{% if do_resume %}
	{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}
	{client.user_resume_macro|default("")}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
	{% endif %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
	{% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
	{% endif %}
	
	{% if not (runout_resume and do_resume) %}
	RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
	{% for element in prompt_txt %}
	RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}'
	{% endfor %}
	RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
	RESPOND TYPE=command MSG="action:prompt_show"
	{% endif %}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro PRINT_START]
gcode = 
	START_PRINT {rawparams}

[gcode_macro PRINT_END]
gcode = 
	END_PRINT {rawparams}

[gcode_macro START_PRINT]
gcode = 
	G28
	{% set BED_TEMP = params.BED|default(96)|float %}
	{% set TOOL_TEMP = params.EXTRUDER|default(200)|float %}
	M104 S{TOOL_TEMP}
	M190 S{BED_TEMP}
	M107
	
	G21
	G90
	M82
	G92 E0
	G28
	BED_MESH_CALIBRATE ADAPTIVE=1 ADAPTIVE_MARGIN=10
	G1 Z10 F3000
	M190 S{BED_TEMP}
	M109 S{TOOL_TEMP}
	G92 E0
	SKEW_PROFILE LOAD=skew_profile
	LINE_PURGE

[gcode_macro FILAMENT_START]
gcode = 
	{% set material = params.MATERIAL|default("PLA") %}
	{% set vendor = params.VENDOR|default("Unknown") %}
	{% set color = params.COLOR|default("Unknown") %}
	{% set pa_constant = {'PLA': 0.055, 'PETG': 0.055, 'ABS': 0.055, 'ASA': 0.1540, 'Nylon': 0.055, 'TPU': 0.055, 'PVB': 0.055}[material] %}
	{% set retraction_speed = {'PLA': 65, 'PETG': 65, 'ABS': 65, 'ASA': 65, 'Nylon': 65, 'TPU': 65, 'PVB': 65}[material] %}
	{% set detraction_speed = {'PLA': 65, 'PETG': 65, 'ABS': 65, 'ASA': 65, 'Nylon': 65, 'TPU': 65, 'PVB': 65}[material] %}
	{% set retraction = {'PLA': 0.4, 'PETG': 0.4, 'ABS': 0.4, 'ASA': 0.4, 'Nylon': 0.4, 'TPU': 0.4, 'PVB': 0.4}[material] %}

[gcode_macro CALCULATE_PA]
gcode = 
	{% set material = params.MATERIAL|default("PLA") %}
	{% set bowden_length = (params.BOWDEN_LENGTH|default(5.5)|float) / 10 %}
	{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}
	{% set nozzle_size = params.NOZZLE_SIZE|default(0.4)|float %}
	{% set print_speed = params.PRINT_SPEED|default(150)|float %}
	{% set material_constant = {'PLA': 100, 'PETG': 120, 'ABS': 110, 'ASA': 84, 'Nylon': 130, 'TPU': 150, 'PVB': 100}[material] %}
	{% set vfr = nozzle_size * layer_height * print_speed %}
	{% set pressure_advance = (vfr * bowden_length) / material_constant %}
	
	SET_PRESSURE_ADVANCE ADVANCE={pressure_advance}

[gcode_macro BEFORE_LAYER_CHANGE]
gcode = 
	{% set layer_num_prev = params.LAYER_NUM|default(0) %}
	{% set layer_h_prev = params.LAYER_Z|default(0)|float %}
	{% set layer_h_max = params.LAYER_MAX_Z|default(100)|float %}
	{% set material = params.MATERIAL|default("PLA") %}
	{% set nozzle_size_prev = params.NOZZLE_SIZE|default(0.4)|float %}
	{% set total_layer_count = params.TOTAL_LAYER_COUNT|default(3000)|float %}
	{% set max_print_speed = params.MAX_PRINT_SPEED|default(150)|float %}

[gcode_macro AFTER_LAYER_CHANGE]
description = After layer change housekeeping
gcode = 
	{% set layer_num_prev = params.LAYER_NUM|default(0) %}
	{% set layer_h_prev = params.LAYER_Z|default(0)|float %}
	{% set layer_h_max = params.LAYER_MAX_Z|default(100)|float %}
	{% set material = params.MATERIAL|default("PLA") %}
	{% set nozzle_size_prev = params.NOZZLE_SIZE|default(0.4)|float %}
	{% set total_layer_count = params.TOTAL_LAYER_COUNT|default(3000)|float %}
	{% set max_print_speed = params.MAX_PRINT_SPEED|default(150)|float %}

[gcode_macro END_PRINT]
gcode = 
	{% set bound = params.BOUND|default(20)|int %}
	{% set BED_MAX_X = printer.toolhead.axis_maximum.x - bound %}
	{% set BED_MAX_Y = printer.toolhead.axis_maximum.y - bound %}
	{% set BED_MAX_Z = printer.toolhead.axis_maximum.z - bound %}
	
	
	SET_SKEW CLEAR=1
	
	
	M140 S0
	M104 S0
	M106 S0
	
	G91
	G1 X-2 Y-2 E-0.8 F3000
	
	G1 Z10 F2000
	G90
	G1 X{BED_MAX_X} Y{BED_MAX_Y} F1000

[homing_override]
axes = xyz
set_position_z = 0
gcode = 
	
	{% set CURRENTLESS = 0 %}
	{% set PROBE_X = 133 %}
	{% set PROBE_Y = 110 %}
	{% set PROBE_XY_SPEED = 60 %}
	{% set MOVE_TO_PREVIOUS = False %}
	
	{% set MOVE_TO_PREV_SPEED = 50 %}
	{% set HOMING_BOUNCE = 5.0 %}
	{% set BOUNCE_SPEED = 25 %}
	{% set Z_HOP = 5 %}
	{% set Z_HOP_SPEED = 10 %}
	
	{% set X_HOMING_CUR = 1.000 %}
	{% set Y_HOMING_CUR = 1.000 %}
	{% set HOMING_ACCEL = 700 %}
	
	{% set PAUSE = 1000 %}
	
	{% set SAFETY_HOP = 5 %}
	{% set SAFETY_HOP_SPEED = 5 %}
	
	
	
	{% set cur_accel = printer.toolhead.max_accel %}
	{% set cur_accel_to_decel = printer.toolhead.max_accel_to_decel %}
	
	{% set requested = {'x': False,
	'y': False,
	'z': False} %}
	{% if   not 'X' in params
	and not 'Y' in params
	and not 'Z' in params %}
	{% set X, Y, Z = True, True, True %}
	{% else %}
	{% if 'X' in params %}
	{% set X = True %}
	{% set null = requested.update({'x': True}) %}
	{% endif %}
	{% if 'Y' in params %}
	{% set Y = True %}
	{% set null = requested.update({'y': True}) %}
	{% endif %}
	{% if 'Z' in params %}
	{% set Z = True %}
	{% set null = requested.update({'z': True}) %}
	{% endif %}
	{% endif %}
	
	
	
	
	{% if not "xyz" in printer.toolhead.homed_axes %}
	G1 Z{SAFETY_HOP} F{(SAFETY_HOP_SPEED * 60)}
	{% endif %}
	
	
	{% if MOVE_TO_PREVIOUS %}
	SAVE_GCODE_STATE NAME=homing
	{% endif %}
	
	
	{% if CURRENTLESS != 1 %}
	{% if X and Y %}
	SENSORLESS_HOME_ALL X_CUR={X_HOMING_CUR} Y_CUR={Y_HOMING_CUR} ACCEL={HOMING_ACCEL} BOUNCE={HOMING_BOUNCE} BOUNCE_SPEED={BOUNCE_SPEED} PAUSE={PAUSE}
	{% elif X %}
	SENSORLESS_HOME_X CURRENT={X_HOMING_CUR} ACCEL={HOMING_ACCEL} BOUNCE={HOMING_BOUNCE} BOUNCE_SPEED={BOUNCE_SPEED} PAUSE={PAUSE}
	{% elif Y %}
	SENSORLESS_HOME_Y CURRENT={Y_HOMING_CUR} ACCEL={HOMING_ACCEL} BOUNCE={HOMING_BOUNCE} BOUNCE_SPEED={BOUNCE_SPEED} PAUSE={PAUSE}
	{% endif %}
	{% else %}
	{% if X and Y %}
	SENSOR_HOME_ALL ACCEL={HOMING_ACCEL} BOUNCE={HOMING_BOUNCE} BOUNCE_SPEED={BOUNCE_SPEED} PAUSE={PAUSE}
	{% elif X %}
	SENSOR_HOME_X ACCEL={HOMING_ACCEL} BOUNCE={HOMING_BOUNCE} BOUNCE_SPEED={BOUNCE_SPEED} PAUSE={PAUSE}
	{% elif Y %}
	SENSOR_HOME_Y ACCEL={HOMING_ACCEL} BOUNCE={HOMING_BOUNCE} BOUNCE_SPEED={BOUNCE_SPEED} PAUSE={PAUSE}
	{% endif %}
	{% endif %}
	
	
	{% if Z %}
	G1 X{PROBE_X} Y{PROBE_Y} F{(PROBE_XY_SPEED * 60)}
	G28 Z
	G1 Z{Z_HOP} F{(Z_HOP_SPEED * 60)}
	{% endif %}
	
	
	{% if MOVE_TO_PREVIOUS %}
	{% if MOVE_TO_PREV_SPEED == 0 %}
	RESTORE_GCODE_STATE NAME=homing MOVE=1
	{% else %}
	RESTORE_GCODE_STATE NAME=homing MOVE=1 MOVE_SPEED={MOVE_TO_PREV_SPEED}
	{% endif %}
	{% endif %}
	
	
	{% if printer.toolhead.max_accel != cur_accel %}
	SET_VELOCITY_LIMIT ACCEL={cur_accel} ACCEL_TO_DECEL={cur_accel_to_decel}
	{% endif %}

[gcode_macro SENSORLESS_HOME_ALL]
description = Home XY with modified current
gcode = 
	{% set HOME_CUR_X = params.X_CUR|default(0.250)|float %}
	{% set HOME_CUR_Y = params.Y_CUR|default(0.250)|float %}
	{% set HOME_ACCEL = params.ACCEL|default(1000)|float %}
	{% set BOUNCE = params.BOUNCE|default(10)|float %}
	{% set BOUNCE_SPEED = params.BOUNCE_SPEED|default(20)|float %}
	{% set driver_config_x = printer.configfile.settings['tmc2209 stepper_x'] %}
	{% set driver_config_y = printer.configfile.settings['tmc2209 stepper_y'] %}
	{% set RUN_CUR_X = driver_config_x.run_current %}
	{% set RUN_CUR_Y = driver_config_y.run_current %}
	{% set PAUSE = params.PAUSE|default(2000)|int %}
	
	
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR_X}
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CUR_Y}
	
	SET_VELOCITY_LIMIT ACCEL={HOME_ACCEL} ACCEL_TO_DECEL={(HOME_ACCEL * 0.5)}
	
	G4 P{PAUSE}
	
	G28 X0
	{% if BOUNCE %}
	
	G91
	G1 X{BOUNCE} F{(BOUNCE_SPEED * 60)}
	G90
	{% endif %}
	
	G28 Y0
	{% if BOUNCE %}
	
	G91
	G1 Y{BOUNCE} F{(BOUNCE_SPEED * 60)}
	G90
	{% endif %}
	
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CUR_X}
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CUR_Y}
	
	G4 P{PAUSE}

[gcode_macro SENSORLESS_HOME_X]
description = Home X with modified current
gcode = 
	{% set HOME_CUR = params.CURRENT|default(0.250)|float %}
	{% set HOME_ACCEL = params.ACCEL|default(1000)|float %}
	{% set BOUNCE = params.BOUNCE|default(10)|float %}
	{% set BOUNCE_SPEED = params.BOUNCE_SPEED|default(20)|float %}
	{% set driver_config = printer.configfile.settings['tmc2209 stepper_x'] %}
	{% set RUN_CUR = driver_config.run_current %}
	{% set PAUSE = params.PAUSE|default(2000)|int %}
	
	
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR}
	
	SET_VELOCITY_LIMIT ACCEL={HOME_ACCEL} ACCEL_TO_DECEL={(HOME_ACCEL * 0.5)}
	
	G4 P{PAUSE}
	
	G28 X0
	{% if BOUNCE %}
	
	G91
	G1 X{BOUNCE} F{(BOUNCE_SPEED * 60)}
	G90
	{% endif %}
	
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CUR}
	
	G4 P{PAUSE}

[gcode_macro SENSORLESS_HOME_Y]
description = Home Y with modified current
gcode = 
	{% set HOME_CUR = params.CURRENT|default(0.250)|float %}
	{% set HOME_ACCEL = params.ACCEL|default(1000)|float %}
	{% set BOUNCE = params.BOUNCE|default(10)|float %}
	{% set BOUNCE_SPEED = params.BOUNCE_SPEED|default(20)|float %}
	{% set driver_config = printer.configfile.settings['tmc2209 stepper_y'] %}
	{% set RUN_CUR = driver_config.run_current %}
	{% set PAUSE = params.PAUSE|default(2000)|int %}
	
	
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CUR}
	
	SET_VELOCITY_LIMIT ACCEL={HOME_ACCEL} ACCEL_TO_DECEL={(HOME_ACCEL * 0.5)}
	
	G4 P{PAUSE}
	
	G28 Y0
	{% if BOUNCE %}
	
	G91
	G1 Y{BOUNCE} F{(BOUNCE_SPEED * 60)}
	G90
	{% endif %}
	
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CUR}
	
	G4 P{PAUSE}

[gcode_macro SENSOR_HOME_ALL]
description = Home XY
gcode = 
	{% set HOME_ACCEL = params.ACCEL|default(1000)|float %}
	{% set BOUNCE = params.BOUNCE|default(10)|float %}
	{% set BOUNCE_SPEED = params.BOUNCE_SPEED|default(20)|float %}
	{% set PAUSE = params.PAUSE|default(2000)|int %}
	
	
	SET_VELOCITY_LIMIT ACCEL={HOME_ACCEL} ACCEL_TO_DECEL={(HOME_ACCEL * 0.5)}
	
	G4 P{PAUSE}
	
	G28 X0
	{% if BOUNCE %}
	
	G91
	G1 X{BOUNCE} F{(BOUNCE_SPEED * 60)}
	G90
	{% endif %}
	
	G28 Y0
	{% if BOUNCE %}
	
	G91
	G1 Y{BOUNCE} F{(BOUNCE_SPEED * 60)}
	G90
	{% endif %}
	
	G4 P{PAUSE}

[gcode_macro SENSOR_HOME_X]
description = Home X
gcode = 
	{% set HOME_ACCEL = params.ACCEL|default(1000)|float %}
	{% set BOUNCE = params.BOUNCE|default(10)|float %}
	{% set BOUNCE_SPEED = params.BOUNCE_SPEED|default(20)|float %}
	{% set PAUSE = params.PAUSE|default(2000)|int %}
	
	
	SET_VELOCITY_LIMIT ACCEL={HOME_ACCEL} ACCEL_TO_DECEL={(HOME_ACCEL * 0.5)}
	
	G4 P{PAUSE}
	
	G28 X0
	{% if BOUNCE %}
	
	G91
	G1 X{BOUNCE} F{(BOUNCE_SPEED * 60)}
	G90
	{% endif %}
	
	G4 P{PAUSE}

[gcode_macro SENSOR_HOME_Y]
description = Home Y
gcode = 
	{% set HOME_ACCEL = params.ACCEL|default(1000)|float %}
	{% set BOUNCE = params.BOUNCE|default(10)|float %}
	{% set BOUNCE_SPEED = params.BOUNCE_SPEED|default(20)|float %}
	{% set PAUSE = params.PAUSE|default(2000)|int %}
	
	
	SET_VELOCITY_LIMIT ACCEL={HOME_ACCEL} ACCEL_TO_DECEL={(HOME_ACCEL * 0.5)}
	
	G4 P{PAUSE}
	
	G28 Y0
	{% if BOUNCE %}
	
	G91
	G1 Y{BOUNCE} F{(BOUNCE_SPEED * 60)}
	G90
	{% endif %}
	
	G4 P{PAUSE}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(printer.configfile.config["stepper_x"]["position_endstop"]|string)|int %}
	{% set Y = params.Y|default(printer.configfile.config["stepper_y"]["position_endstop"]|string)|int %}
	{% set Z = params.Z|default(10)|int %}
	{% set E = params.E|default(-20)|int %}
	{% set tool = params.tool|default(0)|int %}
	PAUSE
	G91
	G1 E-5 F4000
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G0 E10 F500
	G0 E{E} F600
	G92 E0

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	M400
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	M400
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.minimum_cruise_ratio}
	
	
	M400
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[gcode_macro DUMP_VARIABLES]
gcode = 
	{% set filter_name = params.NAME|default('')|string|lower %}
	{% set filter_value = params.VALUE|default('')|string|lower %}
	{% set show_cfg = params.SHOW_CFG|default(0)|int %}
	
	{% set out = [] %}
	
	{% for key1 in printer %}
	{% for key2 in printer[key1] %}
	{% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
	{% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
	{% endif %}
	{% else %}
	{% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
	{% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	{action_respond_info(out|join("\n"))}

[gcode_macro GET_VARIABLE]
gcode = 
	{% set names = (params.NAME).split('.')|list %}
	{% set join = (params.JOIN)|default(1)|int %}
	
	{% set _dummy0 = namespace( break = 0 ) %}
	{% set _dummy1 = namespace( out = printer[names|first] ) %}
	
	{% for name in names if _dummy0.break == 0 %}
	{% if loop.index > 1 %}
	{% if name in _dummy1.out %}
	{% set _dummy1.out = _dummy1.out[name] %}
	{% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
	{% set _dummy1.out = _dummy1.out[name|int] %}
	{% else %}
	{% set _dummy0.break = loop.index0 %}
	{% endif %}
	{% endif %}
	{% endfor %}
	
	{% if _dummy1.out is boolean %}
	{ action_respond_info('Type: boolean') }
	{% elif _dummy1.out is float %}
	{ action_respond_info('Type: float') }
	{% elif _dummy1.out is integer %}
	{ action_respond_info('Type: integer') }
	{% elif _dummy1.out is mapping %}
	{ action_respond_info('Type: mapping') }
	{% elif _dummy1.out is string %}
	{ action_respond_info('Type: string') }
	{% elif _dummy1.out is iterable %}
	{ action_respond_info('Type: iterable') }
	{% elif _dummy1.out is none %}
	{ action_respond_info('Type: none') }
	{% elif _dummy1.out is undefined %}
	{ action_respond_info('Type: undefined') }
	{% elif _dummy1.out is callable %}
	{ action_respond_info('Type: callable') }
	{% else %}
	{ action_respond_info('Type: unknown') }
	{% endif %}
	
	{% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
	{ action_respond_info('%s' % _dummy1.out|join("\n")) }
	{% else %}
	{ action_respond_info('%s' % _dummy1.out) }
	{% endif %}
	
	{% if _dummy0.break != 0 %}
	{ action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
	{% endif %}

[gcode_macro M109]
rename_existing = M99109
gcode = 
	
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro M190]
rename_existing = M99190
gcode = 
	
	{% set s = params.S|float %}
	
	M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[save_variables]
filename = ender3_variables.cfg

[exclude_object]

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}
	{% set attach_macro = kamp_settings.attach_macro | string %}
	{% set detach_macro = kamp_settings.detach_macro | string %}
	{% set mesh_margin = kamp_settings.mesh_margin | float %}
	{% set fuzz_amount = kamp_settings.fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	{% if printer.exclude_object.objects != [] %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% else %}
	
	{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}
	G4 P5000
	{% endif %}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 0
variable_fuzz_amount = 0
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 20
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[idle_timeout]
timeout = 1800

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32f103xe_37FFDD054253373706802457-if00

[board_pins]
aliases = 
	EXP1_1=<5V>,EXP1_2=<GND>,EXP1_3=PB15,EXP1_4=PB8,EXP1_5=PB9,
	EXP1_6=PA10,EXP1_7=<RESET>,EXP1_8=PA9,EXP1_9=PA15,EXP1_10=PB5,

[mcu EBB]
canbus_uuid = 44886b422df2

[printer]
kinematics = cartesian
max_velocity = 1000
max_accel = 1500
minimum_cruise_ratio = 0.4
square_corner_velocity = 5
max_z_accel = 42

[skew_correction]

[screws_tilt_adjust]
screw1 = 40, 180
screw1_name = Back_L
screw2 = 175, 180
screw2_name = Back_R
screw3 = 40, 21
screw3_name = Front_L
screw4 = 175, 21
screw4_name = Front_R
speed = 50
horizontal_move_z = 20

[z_tilt]
z_positions = -40, 200
	198,200
points = 40, 198
	40, 198
	40, 21
	172, 21
speed = 50
horizontal_move_z = 5

[bed_screws]
screw1 = 40, 170
screw1_name = Back_L
screw2 = 172, 170
screw2_name = Back_R
screw3 = 40, 21
screw3_name = Front_L
screw4 = 172, 21
screw4_name = Front_R
speed = 50
horizontal_move_z = 20

[bltouch]
stow_on_each_sample = false
probe_with_touch_mode = true
sensor_pin = ^EBB: PB8
control_pin = EBB: PB9
pin_move_time = 0.5
x_offset = -55
y_offset = -10
speed = 8
lift_speed = 7
samples_tolerance = 0.01
samples = 3
sample_retract_dist = 3
samples_tolerance_retries = 5
z_offset = 0.425

[bed_mesh]
adaptive_margin = 5
speed = 1000
horizontal_move_z = 3
mesh_min = 0, 0
mesh_max = 100, 100
probe_count = 7, 7
algorithm = bicubic

[homing_heaters]
heaters = extruder, heater_bed

[stepper_x]
step_pin = PB13
dir_pin = !PB12
enable_pin = !PB14
endstop_pin = tmc2209_stepper_x:virtual_endstop
microsteps = 64
homing_retract_dist = 0
rotation_distance = 40
position_endstop = 0
position_min = 0
position_max = 180
homing_speed = 60

[tmc2209 stepper_x]
uart_pin = PC11
tx_pin = PC10
diag_pin = ^PC0
uart_address = 0
interpolate = false
run_current = 0.88
driver_sgthrs = 95

[stepper_y]
step_pin = PB10
dir_pin = !PB2
enable_pin = !PB11
endstop_pin = tmc2209_stepper_y:virtual_endstop
homing_retract_dist = 0
microsteps = 64
rotation_distance = 40
position_min = 0
position_endstop = 0
position_max = 185
homing_speed = 65

[tmc2209 stepper_y]
uart_pin = PC11
tx_pin = PC10
diag_pin = ^PC1
interpolate = false
uart_address = 2
run_current = 0.7
driver_sgthrs = 100

[stepper_z]
step_pin = PB0
dir_pin = PC5
enable_pin = !PB1
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
microsteps = 64
position_max = 230
position_min = -5
homing_speed = 5

[tmc2209 stepper_z]
uart_pin = PC11
tx_pin = PC10
uart_address = 1
interpolate = false
run_current = .88

[stepper_z1]
step_pin = PB3
dir_pin = !PB4
enable_pin = !PD2
rotation_distance = 8
microsteps = 64

[tmc2209 stepper_z1]
uart_pin = PC11
tx_pin = PC10
uart_address = 3
interpolate = false
run_current = .88

[extruder]
step_pin = EBB: PD0
dir_pin = EBB: PD1
enable_pin = !EBB: PD2
microsteps = 64
rotation_distance = 23.003
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = EBB: PB13
sensor_type = Generic 3950
sensor_pin = EBB: PA3
min_temp = 0
max_temp = 300
max_extrude_cross_section = 5
pid_kp = 22.616
pid_ki = 1.311
pid_kd = 97.530
control = pid

[firmware_retraction]
retract_length = 0.4
retract_speed = 80
unretract_extra_length = 0
unretract_speed = 80

[gcode_arcs]
resolution = 1.0

[tmc2209 extruder]
uart_pin = EBB: PA15
run_current = 0.8
interpolate = false

[verify_heater extruder]
max_error = 240
check_gain_time = 60

[verify_heater heater_bed]
check_gain_time = 120
hysteresis = 5
heating_gain = 1

[heater_bed]
heater_pin = PC9
sensor_type = Generic 3950
sensor_pin = PC3
min_temp = 0
max_temp = 130
control = pid
pid_kp = 67.317
pid_ki = 1.506
pid_kd = 752.271

[heater_fan nozzle_cooling_fan]
pin = EBB: PA1
heater = extruder
heater_temp = 50.0

[fan]
pin = EBB: PA0

[static_digital_output usb_pullup_enable]
pins = !PA14

[neopixel my_neopixel]
pin = PA8
chain_count = 18
initial_red = 1
initial_green = 1
initial_blue = 1

[neopixel hotend_rgb]
pin = EBB: PD3

[adxl345]
cs_pin = EBB: PB12
spi_software_sclk_pin = EBB: PB10
spi_software_mosi_pin = EBB: PB11
spi_software_miso_pin = EBB: PB2
axes_map = x,y,z

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor EBB]
sensor_type = temperature_mcu
sensor_mcu = EBB
min_temp = 0
max_temp = 160

[bed_mesh default]
version = 1
points = 
	0.050417, 0.164583, 0.165000
	0.003125, 0.060000, 0.053125
	-0.038958, 0.002917, -0.110000
tension = 0.2
min_x = 82.61000000000001
algo = lagrange
y_count = 3
mesh_y_pps = 2
min_y = 69.21
x_count = 3
max_y = 99.99
mesh_x_pps = 2
max_x = 97.38999999999999

[skew_correction my_skew_profile]
xy_skew = -0.003552463343554649
xz_skew = 0.0
yz_skew = 0.0

[skew_correction skew_profile]
xy_skew = -0.005919001874824016
xz_skew = 0.0
yz_skew = 0.0
=======================
extruder: pressure_advance: 0.062000
pressure_advance_smooth_time: 0.040000
Loaded MCU 'mcu' 112 commands (v0.12.0-61-gb50d6669 / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.34-4+rpi1+14) 2.34)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1=PB6,PB7 BUS_PINS_i2c1a=PB8,PB9 BUS_PINS_i2c2=PB10,PB11 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=72000000 INITIAL_PINS=!PA14 MCU=stm32f103xe PWM_MAX=255 RESERVE_PINS_USB=PA11,PA12 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Configured MCU 'mcu' (1024 moves)
toolhead: max_velocity: 1000.000000
max_accel: 700.000000
minimum_cruise_ratio: 0.500000
square_corner_velocity: 5.000000
Args: ['/home/blackaxis/klipper/klippy/klippy.py', '/home/blackaxis/Ender3_data/config/printer.cfg', '-I', '/home/blackaxis/Ender3_data/comms/klippy.serial', '-l', '/home/blackaxis/Ender3_data/logs/klippy.log', '-a', '/home/blackaxis/Ender3_data/comms/klippy.sock']
Git version: 'v0.12.0-207-g6cd17420'
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.11.2 (main, Mar 13 2023, 12:18:29) [GCC 12.2.0]'
webhooks client 140732629080016: {'program': 'Moonraker', 'version': 'v0.8.0-379-g346a3d7'}
=============== Log rollover at Mon Jun 17 02:02:28 2024 ===============
Stats 393828.2: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=15654612 bytes_read=7938756 bytes_retransmit=35 bytes_invalid=0 send_seq=376233 receive_seq=376233 retransmit_seq=2065 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997798 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=5791544 bytes_read=9814262 bytes_retransmit=0 bytes_invalid=0 send_seq=182512 receive_seq=182512 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000231 adj=64002154  heater_bed: target=0 temp=24.0 pwm=0.000 raspberry_pi: temp=59.0 EBB: temp=41.7 sysload=0.87 cputime=467.345 memavail=7560336 print_time=77854.411 buffer_time=0.563 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Attempting MCU 'mcu' reset command
Attempting MCU 'EBB' reset command
webhooks client 140732629080016: Disconnected
Restarting printer
Start printer at Mon Jun 17 02:02:30 2024 (1718604150.1 393829.9)
===== Config file =====
[virtual_sdcard]
path = /home/blackaxis/Ender3_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[respond]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	M400
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
	{% set retract = client.cancel_retract|default(1)|abs %}
	{% set BED_TEMP = params.BED|default(60)|float %}
	{% set TOOL_TEMP = params.EXTRUDER|default(175)|float %}
	
	{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
	else "X=" ~ client.park_at_cancel_x %}
	{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
	else "Y=" ~ client.park_at_cancel_y %}
	{% set custom_park = park_x|length > 0 or park_y|length > 0 %}
	
	
	{% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
	{% endif %}
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	{client.user_cancel_macro|default("")}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
	{% set restore = False if printer.toolhead.extruder == ''
	else True  if params.RESTORE|default(1)|int == 1 else False %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	{client.user_pause_macro|default("")}
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	{% set runout_resume = True if client.runout_sensor|default("") == ""
	else True if not printer[client.runout_sensor].enabled
	else printer[client.runout_sensor].filament_detected %}
	{% set can_extrude = True if printer.toolhead.extruder == ''
	else printer[printer.toolhead.extruder].can_extrude %}
	{% set do_resume = False %}
	{% set prompt_txt = [] %}
	
	
	{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	{% if last_extruder_temp.restore %}
	
	RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
	M109 S{last_extruder_temp.temp}
	{% set do_resume = True %}
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	{% if runout_resume %}
	{% if do_resume %}
	{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}
	{client.user_resume_macro|default("")}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
	{% endif %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
	{% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
	{% endif %}
	
	{% if not (runout_resume and do_resume) %}
	RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
	{% for element in prompt_txt %}
	RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}'
	{% endfor %}
	RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
	RESPOND TYPE=command MSG="action:prompt_show"
	{% endif %}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro PRINT_START]
gcode = 
	START_PRINT {rawparams}

[gcode_macro PRINT_END]
gcode = 
	END_PRINT {rawparams}

[gcode_macro START_PRINT]
gcode = 
	G28
	{% set BED_TEMP = params.BED|default(96)|float %}
	{% set TOOL_TEMP = params.EXTRUDER|default(200)|float %}
	M104 S{TOOL_TEMP}
	M190 S{BED_TEMP}
	M107
	
	G21
	G90
	M82
	G92 E0
	G28
	BED_MESH_CALIBRATE ADAPTIVE=1 ADAPTIVE_MARGIN=10
	G1 Z10 F3000
	M190 S{BED_TEMP}
	M109 S{TOOL_TEMP}
	G92 E0
	SKEW_PROFILE LOAD=skew_profile
	LINE_PURGE

[gcode_macro FILAMENT_START]
gcode = 
	{% set material = params.MATERIAL|default("PLA") %}
	{% set vendor = params.VENDOR|default("Unknown") %}
	{% set color = params.COLOR|default("Unknown") %}
	{% set pa_constant = {'PLA': 0.055, 'PETG': 0.055, 'ABS': 0.055, 'ASA': 0.1540, 'Nylon': 0.055, 'TPU': 0.055, 'PVB': 0.055}[material] %}
	{% set retraction_speed = {'PLA': 65, 'PETG': 65, 'ABS': 65, 'ASA': 65, 'Nylon': 65, 'TPU': 65, 'PVB': 65}[material] %}
	{% set detraction_speed = {'PLA': 65, 'PETG': 65, 'ABS': 65, 'ASA': 65, 'Nylon': 65, 'TPU': 65, 'PVB': 65}[material] %}
	{% set retraction = {'PLA': 0.4, 'PETG': 0.4, 'ABS': 0.4, 'ASA': 0.4, 'Nylon': 0.4, 'TPU': 0.4, 'PVB': 0.4}[material] %}

[gcode_macro CALCULATE_PA]
gcode = 
	{% set material = params.MATERIAL|default("PLA") %}
	{% set bowden_length = (params.BOWDEN_LENGTH|default(5.5)|float) / 10 %}
	{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}
	{% set nozzle_size = params.NOZZLE_SIZE|default(0.4)|float %}
	{% set print_speed = params.PRINT_SPEED|default(150)|float %}
	{% set material_constant = {'PLA': 100, 'PETG': 120, 'ABS': 110, 'ASA': 84, 'Nylon': 130, 'TPU': 150, 'PVB': 100}[material] %}
	{% set vfr = nozzle_size * layer_height * print_speed %}
	{% set pressure_advance = (vfr * bowden_length) / material_constant %}
	
	SET_PRESSURE_ADVANCE ADVANCE={pressure_advance}

[gcode_macro BEFORE_LAYER_CHANGE]
gcode = 
	{% set layer_num_prev = params.LAYER_NUM|default(0) %}
	{% set layer_h_prev = params.LAYER_Z|default(0)|float %}
	{% set layer_h_max = params.LAYER_MAX_Z|default(100)|float %}
	{% set material = params.MATERIAL|default("PLA") %}
	{% set nozzle_size_prev = params.NOZZLE_SIZE|default(0.4)|float %}
	{% set total_layer_count = params.TOTAL_LAYER_COUNT|default(3000)|float %}
	{% set max_print_speed = params.MAX_PRINT_SPEED|default(150)|float %}

[gcode_macro AFTER_LAYER_CHANGE]
description = After layer change housekeeping
gcode = 
	{% set layer_num_prev = params.LAYER_NUM|default(0) %}
	{% set layer_h_prev = params.LAYER_Z|default(0)|float %}
	{% set layer_h_max = params.LAYER_MAX_Z|default(100)|float %}
	{% set material = params.MATERIAL|default("PLA") %}
	{% set nozzle_size_prev = params.NOZZLE_SIZE|default(0.4)|float %}
	{% set total_layer_count = params.TOTAL_LAYER_COUNT|default(3000)|float %}
	{% set max_print_speed = params.MAX_PRINT_SPEED|default(150)|float %}

[gcode_macro END_PRINT]
gcode = 
	{% set bound = params.BOUND|default(20)|int %}
	{% set BED_MAX_X = printer.toolhead.axis_maximum.x - bound %}
	{% set BED_MAX_Y = printer.toolhead.axis_maximum.y - bound %}
	{% set BED_MAX_Z = printer.toolhead.axis_maximum.z - bound %}
	
	
	SET_SKEW CLEAR=1
	
	
	M140 S0
	M104 S0
	M106 S0
	
	G91
	G1 X-2 Y-2 E-0.8 F3000
	
	G1 Z10 F2000
	G90
	G1 X{BED_MAX_X} Y{BED_MAX_Y} F1000

[homing_override]
axes = xyz
set_position_z = 0
gcode = 
	
	{% set CURRENTLESS = 0 %}
	{% set PROBE_X = 133 %}
	{% set PROBE_Y = 110 %}
	{% set PROBE_XY_SPEED = 60 %}
	{% set MOVE_TO_PREVIOUS = False %}
	
	{% set MOVE_TO_PREV_SPEED = 50 %}
	{% set HOMING_BOUNCE = 5.0 %}
	{% set BOUNCE_SPEED = 25 %}
	{% set Z_HOP = 5 %}
	{% set Z_HOP_SPEED = 10 %}
	
	{% set X_HOMING_CUR = 1.000 %}
	{% set Y_HOMING_CUR = 1.000 %}
	{% set HOMING_ACCEL = 700 %}
	
	{% set PAUSE = 1000 %}
	
	{% set SAFETY_HOP = 5 %}
	{% set SAFETY_HOP_SPEED = 5 %}
	
	
	
	{% set cur_accel = printer.toolhead.max_accel %}
	{% set cur_accel_to_decel = printer.toolhead.max_accel_to_decel %}
	
	{% set requested = {'x': False,
	'y': False,
	'z': False} %}
	{% if   not 'X' in params
	and not 'Y' in params
	and not 'Z' in params %}
	{% set X, Y, Z = True, True, True %}
	{% else %}
	{% if 'X' in params %}
	{% set X = True %}
	{% set null = requested.update({'x': True}) %}
	{% endif %}
	{% if 'Y' in params %}
	{% set Y = True %}
	{% set null = requested.update({'y': True}) %}
	{% endif %}
	{% if 'Z' in params %}
	{% set Z = True %}
	{% set null = requested.update({'z': True}) %}
	{% endif %}
	{% endif %}
	
	
	
	
	{% if not "xyz" in printer.toolhead.homed_axes %}
	G1 Z{SAFETY_HOP} F{(SAFETY_HOP_SPEED * 60)}
	{% endif %}
	
	
	{% if MOVE_TO_PREVIOUS %}
	SAVE_GCODE_STATE NAME=homing
	{% endif %}
	
	
	{% if CURRENTLESS != 1 %}
	{% if X and Y %}
	SENSORLESS_HOME_ALL X_CUR={X_HOMING_CUR} Y_CUR={Y_HOMING_CUR} ACCEL={HOMING_ACCEL} BOUNCE={HOMING_BOUNCE} BOUNCE_SPEED={BOUNCE_SPEED} PAUSE={PAUSE}
	{% elif X %}
	SENSORLESS_HOME_X CURRENT={X_HOMING_CUR} ACCEL={HOMING_ACCEL} BOUNCE={HOMING_BOUNCE} BOUNCE_SPEED={BOUNCE_SPEED} PAUSE={PAUSE}
	{% elif Y %}
	SENSORLESS_HOME_Y CURRENT={Y_HOMING_CUR} ACCEL={HOMING_ACCEL} BOUNCE={HOMING_BOUNCE} BOUNCE_SPEED={BOUNCE_SPEED} PAUSE={PAUSE}
	{% endif %}
	{% else %}
	{% if X and Y %}
	SENSOR_HOME_ALL ACCEL={HOMING_ACCEL} BOUNCE={HOMING_BOUNCE} BOUNCE_SPEED={BOUNCE_SPEED} PAUSE={PAUSE}
	{% elif X %}
	SENSOR_HOME_X ACCEL={HOMING_ACCEL} BOUNCE={HOMING_BOUNCE} BOUNCE_SPEED={BOUNCE_SPEED} PAUSE={PAUSE}
	{% elif Y %}
	SENSOR_HOME_Y ACCEL={HOMING_ACCEL} BOUNCE={HOMING_BOUNCE} BOUNCE_SPEED={BOUNCE_SPEED} PAUSE={PAUSE}
	{% endif %}
	{% endif %}
	
	
	{% if Z %}
	G1 X{PROBE_X} Y{PROBE_Y} F{(PROBE_XY_SPEED * 60)}
	G28 Z
	G1 Z{Z_HOP} F{(Z_HOP_SPEED * 60)}
	{% endif %}
	
	
	{% if MOVE_TO_PREVIOUS %}
	{% if MOVE_TO_PREV_SPEED == 0 %}
	RESTORE_GCODE_STATE NAME=homing MOVE=1
	{% else %}
	RESTORE_GCODE_STATE NAME=homing MOVE=1 MOVE_SPEED={MOVE_TO_PREV_SPEED}
	{% endif %}
	{% endif %}
	
	
	{% if printer.toolhead.max_accel != cur_accel %}
	SET_VELOCITY_LIMIT ACCEL={cur_accel} ACCEL_TO_DECEL={cur_accel_to_decel}
	{% endif %}

[gcode_macro SENSORLESS_HOME_ALL]
description = Home XY with modified current
gcode = 
	{% set HOME_CUR_X = params.X_CUR|default(0.250)|float %}
	{% set HOME_CUR_Y = params.Y_CUR|default(0.250)|float %}
	{% set HOME_ACCEL = params.ACCEL|default(1000)|float %}
	{% set BOUNCE = params.BOUNCE|default(10)|float %}
	{% set BOUNCE_SPEED = params.BOUNCE_SPEED|default(20)|float %}
	{% set driver_config_x = printer.configfile.settings['tmc2209 stepper_x'] %}
	{% set driver_config_y = printer.configfile.settings['tmc2209 stepper_y'] %}
	{% set RUN_CUR_X = driver_config_x.run_current %}
	{% set RUN_CUR_Y = driver_config_y.run_current %}
	{% set PAUSE = params.PAUSE|default(2000)|int %}
	
	
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR_X}
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CUR_Y}
	
	SET_VELOCITY_LIMIT ACCEL={HOME_ACCEL} ACCEL_TO_DECEL={(HOME_ACCEL * 0.5)}
	
	G4 P{PAUSE}
	
	G28 X0
	{% if BOUNCE %}
	
	G91
	G1 X{BOUNCE} F{(BOUNCE_SPEED * 60)}
	G90
	{% endif %}
	
	G28 Y0
	{% if BOUNCE %}
	
	G91
	G1 Y{BOUNCE} F{(BOUNCE_SPEED * 60)}
	G90
	{% endif %}
	
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CUR_X}
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CUR_Y}
	
	G4 P{PAUSE}

[gcode_macro SENSORLESS_HOME_X]
description = Home X with modified current
gcode = 
	{% set HOME_CUR = params.CURRENT|default(0.250)|float %}
	{% set HOME_ACCEL = params.ACCEL|default(1000)|float %}
	{% set BOUNCE = params.BOUNCE|default(10)|float %}
	{% set BOUNCE_SPEED = params.BOUNCE_SPEED|default(20)|float %}
	{% set driver_config = printer.configfile.settings['tmc2209 stepper_x'] %}
	{% set RUN_CUR = driver_config.run_current %}
	{% set PAUSE = params.PAUSE|default(2000)|int %}
	
	
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR}
	
	SET_VELOCITY_LIMIT ACCEL={HOME_ACCEL} ACCEL_TO_DECEL={(HOME_ACCEL * 0.5)}
	
	G4 P{PAUSE}
	
	G28 X0
	{% if BOUNCE %}
	
	G91
	G1 X{BOUNCE} F{(BOUNCE_SPEED * 60)}
	G90
	{% endif %}
	
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CUR}
	
	G4 P{PAUSE}

[gcode_macro SENSORLESS_HOME_Y]
description = Home Y with modified current
gcode = 
	{% set HOME_CUR = params.CURRENT|default(0.250)|float %}
	{% set HOME_ACCEL = params.ACCEL|default(1000)|float %}
	{% set BOUNCE = params.BOUNCE|default(10)|float %}
	{% set BOUNCE_SPEED = params.BOUNCE_SPEED|default(20)|float %}
	{% set driver_config = printer.configfile.settings['tmc2209 stepper_y'] %}
	{% set RUN_CUR = driver_config.run_current %}
	{% set PAUSE = params.PAUSE|default(2000)|int %}
	
	
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CUR}
	
	SET_VELOCITY_LIMIT ACCEL={HOME_ACCEL} ACCEL_TO_DECEL={(HOME_ACCEL * 0.5)}
	
	G4 P{PAUSE}
	
	G28 Y0
	{% if BOUNCE %}
	
	G91
	G1 Y{BOUNCE} F{(BOUNCE_SPEED * 60)}
	G90
	{% endif %}
	
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CUR}
	
	G4 P{PAUSE}

[gcode_macro SENSOR_HOME_ALL]
description = Home XY
gcode = 
	{% set HOME_ACCEL = params.ACCEL|default(1000)|float %}
	{% set BOUNCE = params.BOUNCE|default(10)|float %}
	{% set BOUNCE_SPEED = params.BOUNCE_SPEED|default(20)|float %}
	{% set PAUSE = params.PAUSE|default(2000)|int %}
	
	
	SET_VELOCITY_LIMIT ACCEL={HOME_ACCEL} ACCEL_TO_DECEL={(HOME_ACCEL * 0.5)}
	
	G4 P{PAUSE}
	
	G28 X0
	{% if BOUNCE %}
	
	G91
	G1 X{BOUNCE} F{(BOUNCE_SPEED * 60)}
	G90
	{% endif %}
	
	G28 Y0
	{% if BOUNCE %}
	
	G91
	G1 Y{BOUNCE} F{(BOUNCE_SPEED * 60)}
	G90
	{% endif %}
	
	G4 P{PAUSE}

[gcode_macro SENSOR_HOME_X]
description = Home X
gcode = 
	{% set HOME_ACCEL = params.ACCEL|default(1000)|float %}
	{% set BOUNCE = params.BOUNCE|default(10)|float %}
	{% set BOUNCE_SPEED = params.BOUNCE_SPEED|default(20)|float %}
	{% set PAUSE = params.PAUSE|default(2000)|int %}
	
	
	SET_VELOCITY_LIMIT ACCEL={HOME_ACCEL} ACCEL_TO_DECEL={(HOME_ACCEL * 0.5)}
	
	G4 P{PAUSE}
	
	G28 X0
	{% if BOUNCE %}
	
	G91
	G1 X{BOUNCE} F{(BOUNCE_SPEED * 60)}
	G90
	{% endif %}
	
	G4 P{PAUSE}

[gcode_macro SENSOR_HOME_Y]
description = Home Y
gcode = 
	{% set HOME_ACCEL = params.ACCEL|default(1000)|float %}
	{% set BOUNCE = params.BOUNCE|default(10)|float %}
	{% set BOUNCE_SPEED = params.BOUNCE_SPEED|default(20)|float %}
	{% set PAUSE = params.PAUSE|default(2000)|int %}
	
	
	SET_VELOCITY_LIMIT ACCEL={HOME_ACCEL} ACCEL_TO_DECEL={(HOME_ACCEL * 0.5)}
	
	G4 P{PAUSE}
	
	G28 Y0
	{% if BOUNCE %}
	
	G91
	G1 Y{BOUNCE} F{(BOUNCE_SPEED * 60)}
	G90
	{% endif %}
	
	G4 P{PAUSE}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(printer.configfile.config["stepper_x"]["position_endstop"]|string)|int %}
	{% set Y = params.Y|default(printer.configfile.config["stepper_y"]["position_endstop"]|string)|int %}
	{% set Z = params.Z|default(10)|int %}
	{% set E = params.E|default(-20)|int %}
	{% set tool = params.tool|default(0)|int %}
	PAUSE
	G91
	G1 E-5 F4000
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G0 E10 F500
	G0 E{E} F600
	G92 E0

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	M400
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	M400
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.minimum_cruise_ratio}
	
	
	M400
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[gcode_macro DUMP_VARIABLES]
gcode = 
	{% set filter_name = params.NAME|default('')|string|lower %}
	{% set filter_value = params.VALUE|default('')|string|lower %}
	{% set show_cfg = params.SHOW_CFG|default(0)|int %}
	
	{% set out = [] %}
	
	{% for key1 in printer %}
	{% for key2 in printer[key1] %}
	{% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
	{% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
	{% endif %}
	{% else %}
	{% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
	{% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	{action_respond_info(out|join("\n"))}

[gcode_macro GET_VARIABLE]
gcode = 
	{% set names = (params.NAME).split('.')|list %}
	{% set join = (params.JOIN)|default(1)|int %}
	
	{% set _dummy0 = namespace( break = 0 ) %}
	{% set _dummy1 = namespace( out = printer[names|first] ) %}
	
	{% for name in names if _dummy0.break == 0 %}
	{% if loop.index > 1 %}
	{% if name in _dummy1.out %}
	{% set _dummy1.out = _dummy1.out[name] %}
	{% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
	{% set _dummy1.out = _dummy1.out[name|int] %}
	{% else %}
	{% set _dummy0.break = loop.index0 %}
	{% endif %}
	{% endif %}
	{% endfor %}
	
	{% if _dummy1.out is boolean %}
	{ action_respond_info('Type: boolean') }
	{% elif _dummy1.out is float %}
	{ action_respond_info('Type: float') }
	{% elif _dummy1.out is integer %}
	{ action_respond_info('Type: integer') }
	{% elif _dummy1.out is mapping %}
	{ action_respond_info('Type: mapping') }
	{% elif _dummy1.out is string %}
	{ action_respond_info('Type: string') }
	{% elif _dummy1.out is iterable %}
	{ action_respond_info('Type: iterable') }
	{% elif _dummy1.out is none %}
	{ action_respond_info('Type: none') }
	{% elif _dummy1.out is undefined %}
	{ action_respond_info('Type: undefined') }
	{% elif _dummy1.out is callable %}
	{ action_respond_info('Type: callable') }
	{% else %}
	{ action_respond_info('Type: unknown') }
	{% endif %}
	
	{% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
	{ action_respond_info('%s' % _dummy1.out|join("\n")) }
	{% else %}
	{ action_respond_info('%s' % _dummy1.out) }
	{% endif %}
	
	{% if _dummy0.break != 0 %}
	{ action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
	{% endif %}

[gcode_macro M109]
rename_existing = M99109
gcode = 
	
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro M190]
rename_existing = M99190
gcode = 
	
	{% set s = params.S|float %}
	
	M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[save_variables]
filename = ender3_variables.cfg

[exclude_object]

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}
	{% set attach_macro = kamp_settings.attach_macro | string %}
	{% set detach_macro = kamp_settings.detach_macro | string %}
	{% set mesh_margin = kamp_settings.mesh_margin | float %}
	{% set fuzz_amount = kamp_settings.fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	{% if printer.exclude_object.objects != [] %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% else %}
	
	{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}
	G4 P5000
	{% endif %}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 0
variable_fuzz_amount = 0
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 20
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[idle_timeout]
timeout = 1800

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32f103xe_37FFDD054253373706802457-if00

[board_pins]
aliases = 
	EXP1_1=<5V>,EXP1_2=<GND>,EXP1_3=PB15,EXP1_4=PB8,EXP1_5=PB9,
	EXP1_6=PA10,EXP1_7=<RESET>,EXP1_8=PA9,EXP1_9=PA15,EXP1_10=PB5,

[mcu EBB]
canbus_uuid = 44886b422df2

[printer]
kinematics = cartesian
max_velocity = 500
max_accel = 1500
minimum_cruise_ratio = 0.4
square_corner_velocity = 5
max_z_accel = 42

[skew_correction]

[screws_tilt_adjust]
screw1 = 40, 180
screw1_name = Back_L
screw2 = 175, 180
screw2_name = Back_R
screw3 = 40, 21
screw3_name = Front_L
screw4 = 175, 21
screw4_name = Front_R
speed = 50
horizontal_move_z = 20

[z_tilt]
z_positions = -40, 200
	198,200
points = 40, 198
	40, 198
	40, 21
	172, 21
speed = 50
horizontal_move_z = 5

[bed_screws]
screw1 = 40, 170
screw1_name = Back_L
screw2 = 172, 170
screw2_name = Back_R
screw3 = 40, 21
screw3_name = Front_L
screw4 = 172, 21
screw4_name = Front_R
speed = 50
horizontal_move_z = 20

[bltouch]
stow_on_each_sample = false
probe_with_touch_mode = true
sensor_pin = ^EBB: PB8
control_pin = EBB: PB9
pin_move_time = 0.5
x_offset = -55
y_offset = -10
speed = 8
lift_speed = 7
samples_tolerance = 0.01
samples = 3
sample_retract_dist = 3
samples_tolerance_retries = 5
z_offset = 0.425

[bed_mesh]
adaptive_margin = 5
speed = 1000
horizontal_move_z = 3
mesh_min = 0, 0
mesh_max = 100, 100
probe_count = 7, 7
algorithm = bicubic

[homing_heaters]
heaters = extruder, heater_bed

[stepper_x]
step_pin = PB13
dir_pin = !PB12
enable_pin = !PB14
endstop_pin = tmc2209_stepper_x:virtual_endstop
microsteps = 64
homing_retract_dist = 0
rotation_distance = 40
position_endstop = 0
position_min = 0
position_max = 180
homing_speed = 60

[tmc2209 stepper_x]
uart_pin = PC11
tx_pin = PC10
diag_pin = ^PC0
uart_address = 0
interpolate = false
run_current = 0.88
driver_sgthrs = 95

[stepper_y]
step_pin = PB10
dir_pin = !PB2
enable_pin = !PB11
endstop_pin = tmc2209_stepper_y:virtual_endstop
homing_retract_dist = 0
microsteps = 64
rotation_distance = 40
position_min = 0
position_endstop = 0
position_max = 185
homing_speed = 65

[tmc2209 stepper_y]
uart_pin = PC11
tx_pin = PC10
diag_pin = ^PC1
interpolate = false
uart_address = 2
run_current = 0.7
driver_sgthrs = 100

[stepper_z]
step_pin = PB0
dir_pin = PC5
enable_pin = !PB1
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
microsteps = 64
position_max = 230
position_min = -5
homing_speed = 5

[tmc2209 stepper_z]
uart_pin = PC11
tx_pin = PC10
uart_address = 1
interpolate = false
run_current = .88

[stepper_z1]
step_pin = PB3
dir_pin = !PB4
enable_pin = !PD2
rotation_distance = 8
microsteps = 64

[tmc2209 stepper_z1]
uart_pin = PC11
tx_pin = PC10
uart_address = 3
interpolate = false
run_current = .88

[extruder]
step_pin = EBB: PD0
dir_pin = EBB: PD1
enable_pin = !EBB: PD2
microsteps = 64
rotation_distance = 23.003
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = EBB: PB13
sensor_type = Generic 3950
sensor_pin = EBB: PA3
min_temp = 0
max_temp = 300
max_extrude_cross_section = 5
pid_kp = 22.616
pid_ki = 1.311
pid_kd = 97.530
control = pid

[firmware_retraction]
retract_length = 0.4
retract_speed = 80
unretract_extra_length = 0
unretract_speed = 80

[gcode_arcs]
resolution = 1.0

[tmc2209 extruder]
uart_pin = EBB: PA15
run_current = 0.8
interpolate = false

[verify_heater extruder]
max_error = 240
check_gain_time = 60

[verify_heater heater_bed]
check_gain_time = 120
hysteresis = 5
heating_gain = 1

[heater_bed]
heater_pin = PC9
sensor_type = Generic 3950
sensor_pin = PC3
min_temp = 0
max_temp = 130
control = pid
pid_kp = 67.317
pid_ki = 1.506
pid_kd = 752.271

[heater_fan nozzle_cooling_fan]
pin = EBB: PA1
heater = extruder
heater_temp = 50.0

[fan]
pin = EBB: PA0

[static_digital_output usb_pullup_enable]
pins = !PA14

[neopixel my_neopixel]
pin = PA8
chain_count = 18
initial_red = 1
initial_green = 1
initial_blue = 1

[neopixel hotend_rgb]
pin = EBB: PD3

[adxl345]
cs_pin = EBB: PB12
spi_software_sclk_pin = EBB: PB10
spi_software_mosi_pin = EBB: PB11
spi_software_miso_pin = EBB: PB2
axes_map = x,y,z

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor EBB]
sensor_type = temperature_mcu
sensor_mcu = EBB
min_temp = 0
max_temp = 160

[bed_mesh default]
version = 1
points = 
	0.050417, 0.164583, 0.165000
	0.003125, 0.060000, 0.053125
	-0.038958, 0.002917, -0.110000
tension = 0.2
min_x = 82.61000000000001
algo = lagrange
y_count = 3
mesh_y_pps = 2
min_y = 69.21
x_count = 3
max_y = 99.99
mesh_x_pps = 2
max_x = 97.38999999999999

[skew_correction my_skew_profile]
xy_skew = -0.003552463343554649
xz_skew = 0.0
yz_skew = 0.0

[skew_correction skew_profile]
xy_skew = -0.005919001874824016
xz_skew = 0.0
yz_skew = 0.0
=======================
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting serial connect
webhooks client 140732726160528: New connection
webhooks client 140732726160528: Client info {'program': 'Moonraker', 'version': 'v0.8.0-379-g346a3d7'}
Loaded MCU 'mcu' 112 commands (v0.12.0-61-gb50d6669 / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.34-4+rpi1+14) 2.34)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1=PB6,PB7 BUS_PINS_i2c1a=PB8,PB9 BUS_PINS_i2c2=PB10,PB11 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=72000000 INITIAL_PINS=!PA14 MCU=stm32f103xe PWM_MAX=255 RESERVE_PINS_USB=PA11,PA12 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu 'EBB': Starting CAN connect
Created a socket
Loaded MCU 'EBB' 108 commands (v0.12.0-102-g9f41f53c / gcc: (15:12.2.rel1-1) 12.2.1 20221205 binutils: (2.40-2+18+b1) 2.40)
MCU 'EBB' config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CANBUS_FREQUENCY=500000 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_CAN=PB0,PB1 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu_temperature 'EBB' nominal base=-269.710145 slope=1305.652174
Sending MCU 'mcu' printer configuration...
Configured MCU 'mcu' (1024 moves)
Sending MCU 'EBB' printer configuration...
Configured MCU 'EBB' (1024 moves)
bed_mesh: generated points
Index |  Tool Adjusted  |   Probe
  0   | (55.0, 10.0)    | (0.0, 0.0)
  1   | (71.7, 10.0)    | (16.7, 0.0)
  2   | (88.3, 10.0)    | (33.3, 0.0)
  3   | (105.0, 10.0)   | (50.0, 0.0)
  4   | (121.6, 10.0)   | (66.6, 0.0)
  5   | (138.3, 10.0)   | (83.3, 0.0)
  6   | (155.0, 10.0)   | (100.0, 0.0)
  7   | (155.0, 26.7)   | (100.0, 16.7)
  8   | (138.3, 26.7)   | (83.3, 16.7)
  9   | (121.6, 26.7)   | (66.6, 16.7)
  10  | (105.0, 26.7)   | (50.0, 16.7)
  11  | (88.3, 26.7)    | (33.3, 16.7)
  12  | (71.7, 26.7)    | (16.7, 16.7)
  13  | (55.0, 26.7)    | (0.0, 16.7)
  14  | (55.0, 43.3)    | (0.0, 33.3)
  15  | (71.7, 43.3)    | (16.7, 33.3)
  16  | (88.3, 43.3)    | (33.3, 33.3)
  17  | (105.0, 43.3)   | (50.0, 33.3)
  18  | (121.6, 43.3)   | (66.6, 33.3)
  19  | (138.3, 43.3)   | (83.3, 33.3)
  20  | (155.0, 43.3)   | (100.0, 33.3)
  21  | (155.0, 60.0)   | (100.0, 50.0)
  22  | (138.3, 60.0)   | (83.3, 50.0)
  23  | (121.6, 60.0)   | (66.6, 50.0)
  24  | (105.0, 60.0)   | (50.0, 50.0)
  25  | (88.3, 60.0)    | (33.3, 50.0)
  26  | (71.7, 60.0)    | (16.7, 50.0)
  27  | (55.0, 60.0)    | (0.0, 50.0)
  28  | (55.0, 76.6)    | (0.0, 66.6)
  29  | (71.7, 76.6)    | (16.7, 66.6)
  30  | (88.3, 76.6)    | (33.3, 66.6)
  31  | (105.0, 76.6)   | (50.0, 66.6)
  32  | (121.6, 76.6)   | (66.6, 66.6)
  33  | (138.3, 76.6)   | (83.3, 66.6)
  34  | (155.0, 76.6)   | (100.0, 66.6)
  35  | (155.0, 93.3)   | (100.0, 83.3)
  36  | (138.3, 93.3)   | (83.3, 83.3)
  37  | (121.6, 93.3)   | (66.6, 83.3)
  38  | (105.0, 93.3)   | (50.0, 83.3)
  39  | (88.3, 93.3)    | (33.3, 83.3)
  40  | (71.7, 93.3)    | (16.7, 83.3)
  41  | (55.0, 93.3)    | (0.0, 83.3)
  42  | (55.0, 110.0)   | (0.0, 100.0)
  43  | (71.7, 110.0)   | (16.7, 100.0)
  44  | (88.3, 110.0)   | (33.3, 100.0)
  45  | (105.0, 110.0)  | (50.0, 100.0)
  46  | (121.6, 110.0)  | (66.6, 100.0)
  47  | (138.3, 110.0)  | (83.3, 100.0)
  48  | (155.0, 110.0)  | (100.0, 100.0)
Starting heater checks for extruder
Starting heater checks for heater_bed
Write g-code response
Traceback (most recent call last):
  File "/home/blackaxis/klipper/klippy/gcode.py", line 459, in _respond_raw
    os.write(self.fd, (msg+"\n").encode())
BlockingIOError: [Errno 11] Resource temporarily unavailable
Stats 393832.6: gcodein=0  mcu: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=2529 bytes_read=5887 bytes_retransmit=9 bytes_invalid=0 send_seq=206 receive_seq=206 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71998550 EBB: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1503 bytes_read=4819 bytes_retransmit=0 bytes_invalid=0 send_seq=150 receive_seq=150 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001326 adj=64005532  heater_bed: target=0 temp=24.2 pwm=0.000 raspberry_pi: temp=57.9 EBB: temp=41.9 sysload=0.80 cputime=467.683 memavail=7551584 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
webhooks: registering remote method 'shutdown_machine' for connection id: 140732726160528
webhooks: registering remote method 'reboot_machine' for connection id: 140732726160528
webhooks: registering remote method 'pause_job_queue' for connection id: 140732726160528
webhooks: registering remote method 'start_job_queue' for connection id: 140732726160528
Stats 393833.6: gcodein=0  mcu: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=2535 bytes_read=5963 bytes_retransmit=9 bytes_invalid=0 send_seq=207 receive_seq=207 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997849 EBB: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1509 bytes_read=4937 bytes_retransmit=0 bytes_invalid=0 send_seq=151 receive_seq=151 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000810 adj=64001236  heater_bed: target=0 temp=24.0 pwm=0.000 raspberry_pi: temp=56.8 EBB: temp=41.6 sysload=0.80 cputime=467.691 memavail=7554400 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 393834.6: gcodein=0  mcu: mcu_awake=0.016 mcu_task_avg=0.000016 mcu_task_stddev=0.000032 bytes_write=2541 bytes_read=6039 bytes_retransmit=9 bytes_invalid=0 send_seq=208 receive_seq=208 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997868 EBB: mcu_awake=0.012 mcu_task_avg=0.000014 mcu_task_stddev=0.000028 bytes_write=1515 bytes_read=5055 bytes_retransmit=0 bytes_invalid=0 send_seq=152 receive_seq=152 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000626 adj=64001846  heater_bed: target=0 temp=24.0 pwm=0.000 raspberry_pi: temp=56.8 EBB: temp=41.9 sysload=0.80 cputime=467.697 memavail=7557360 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 393835.6: gcodein=0  mcu: mcu_awake=0.016 mcu_task_avg=0.000016 mcu_task_stddev=0.000032 bytes_write=2547 bytes_read=6100 bytes_retransmit=9 bytes_invalid=0 send_seq=209 receive_seq=209 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997844 EBB: mcu_awake=0.012 mcu_task_avg=0.000014 mcu_task_stddev=0.000028 bytes_write=1521 bytes_read=5172 bytes_retransmit=0 bytes_invalid=0 send_seq=153 receive_seq=153 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64001040 adj=64001685  heater_bed: target=0 temp=24.0 pwm=0.000 raspberry_pi: temp=58.4 EBB: temp=41.6 sysload=0.80 cputime=467.704 memavail=7450112 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 393836.6: gcodein=0  mcu: mcu_awake=0.016 mcu_task_avg=0.000016 mcu_task_stddev=0.000032 bytes_write=2553 bytes_read=6176 bytes_retransmit=9 bytes_invalid=0 send_seq=210 receive_seq=210 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997915 EBB: mcu_awake=0.012 mcu_task_avg=0.000014 mcu_task_stddev=0.000028 bytes_write=1527 bytes_read=5290 bytes_retransmit=0 bytes_invalid=0 send_seq=154 receive_seq=154 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000780 adj=64002820  heater_bed: target=0 temp=24.1 pwm=0.000 raspberry_pi: temp=60.6 EBB: temp=41.9 sysload=0.89 cputime=467.710 memavail=7410032 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 393837.6: gcodein=0  mcu: mcu_awake=0.016 mcu_task_avg=0.000016 mcu_task_stddev=0.000032 bytes_write=2559 bytes_read=6237 bytes_retransmit=9 bytes_invalid=0 send_seq=211 receive_seq=211 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997925 EBB: mcu_awake=0.012 mcu_task_avg=0.000014 mcu_task_stddev=0.000028 bytes_write=1533 bytes_read=5393 bytes_retransmit=0 bytes_invalid=0 send_seq=155 receive_seq=155 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000648 adj=64002084  heater_bed: target=0 temp=24.2 pwm=0.000 raspberry_pi: temp=59.5 EBB: temp=42.0 sysload=0.89 cputime=467.716 memavail=7462080 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 393838.6: gcodein=0  mcu: mcu_awake=0.016 mcu_task_avg=0.000016 mcu_task_stddev=0.000032 bytes_write=2565 bytes_read=6298 bytes_retransmit=9 bytes_invalid=0 send_seq=212 receive_seq=212 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997941 EBB: mcu_awake=0.012 mcu_task_avg=0.000014 mcu_task_stddev=0.000028 bytes_write=1539 bytes_read=5510 bytes_retransmit=0 bytes_invalid=0 send_seq=156 receive_seq=156 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000564 adj=64001852  heater_bed: target=0 temp=24.0 pwm=0.000 raspberry_pi: temp=60.6 EBB: temp=41.8 sysload=0.89 cputime=467.722 memavail=7427760 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 393839.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2571 bytes_read=6388 bytes_retransmit=9 bytes_invalid=0 send_seq=213 receive_seq=213 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997877 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1545 bytes_read=5642 bytes_retransmit=0 bytes_invalid=0 send_seq=157 receive_seq=157 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000479 adj=64001738  heater_bed: target=0 temp=24.0 pwm=0.000 raspberry_pi: temp=59.0 EBB: temp=41.8 sysload=0.89 cputime=467.727 memavail=7558352 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 393840.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2577 bytes_read=6449 bytes_retransmit=9 bytes_invalid=0 send_seq=214 receive_seq=214 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997841 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1551 bytes_read=5745 bytes_retransmit=0 bytes_invalid=0 send_seq=158 receive_seq=158 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000423 adj=64001822  heater_bed: target=0 temp=24.0 pwm=0.000 raspberry_pi: temp=59.0 EBB: temp=41.7 sysload=0.89 cputime=467.730 memavail=7557216 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.8 pwm=0.000
Stats 393841.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2583 bytes_read=6525 bytes_retransmit=9 bytes_invalid=0 send_seq=215 receive_seq=215 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997824 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1557 bytes_read=5877 bytes_retransmit=0 bytes_invalid=0 send_seq=159 receive_seq=159 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000380 adj=64001884  heater_bed: target=0 temp=24.0 pwm=0.000 raspberry_pi: temp=59.5 EBB: temp=41.9 sysload=0.82 cputime=467.734 memavail=7558208 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 393842.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2595 bytes_read=6602 bytes_retransmit=9 bytes_invalid=0 send_seq=217 receive_seq=217 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997817 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1563 bytes_read=5980 bytes_retransmit=0 bytes_invalid=0 send_seq=160 receive_seq=160 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000461 adj=64001902  heater_bed: target=0 temp=24.0 pwm=0.000 raspberry_pi: temp=57.9 EBB: temp=41.9 sysload=0.82 cputime=467.737 memavail=7557984 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 393843.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2601 bytes_read=6663 bytes_retransmit=9 bytes_invalid=0 send_seq=218 receive_seq=218 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997861 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1569 bytes_read=6083 bytes_retransmit=0 bytes_invalid=0 send_seq=161 receive_seq=161 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000412 adj=64002334  heater_bed: target=0 temp=24.1 pwm=0.000 raspberry_pi: temp=56.8 EBB: temp=41.7 sysload=0.82 cputime=467.741 memavail=7557328 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 393844.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2607 bytes_read=6753 bytes_retransmit=9 bytes_invalid=0 send_seq=219 receive_seq=219 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997847 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1575 bytes_read=6229 bytes_retransmit=0 bytes_invalid=0 send_seq=162 receive_seq=162 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000385 adj=64002004  heater_bed: target=0 temp=23.9 pwm=0.000 raspberry_pi: temp=56.2 EBB: temp=41.9 sysload=0.82 cputime=467.745 memavail=7556608 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 393845.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2613 bytes_read=6814 bytes_retransmit=9 bytes_invalid=0 send_seq=220 receive_seq=220 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997850 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1581 bytes_read=6332 bytes_retransmit=0 bytes_invalid=0 send_seq=163 receive_seq=163 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000375 adj=64002020  heater_bed: target=0 temp=23.9 pwm=0.000 raspberry_pi: temp=55.6 EBB: temp=41.7 sysload=0.82 cputime=467.749 memavail=7558704 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 393846.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2619 bytes_read=6875 bytes_retransmit=9 bytes_invalid=0 send_seq=221 receive_seq=221 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997834 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1587 bytes_read=6435 bytes_retransmit=0 bytes_invalid=0 send_seq=164 receive_seq=164 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000363 adj=64002037  heater_bed: target=0 temp=24.0 pwm=0.000 raspberry_pi: temp=54.5 EBB: temp=41.7 sysload=0.76 cputime=467.753 memavail=7558448 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 393847.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2625 bytes_read=6951 bytes_retransmit=9 bytes_invalid=0 send_seq=222 receive_seq=222 retransmit_seq=2 srtt=0.000 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997837 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1593 bytes_read=6567 bytes_retransmit=0 bytes_invalid=0 send_seq=165 receive_seq=165 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000350 adj=64002109  heater_bed: target=0 temp=24.1 pwm=0.000 raspberry_pi: temp=58.4 EBB: temp=42.0 sysload=0.76 cputime=467.759 memavail=7457920 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 393848.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2631 bytes_read=7012 bytes_retransmit=9 bytes_invalid=0 send_seq=223 receive_seq=223 retransmit_seq=2 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997838 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1599 bytes_read=6670 bytes_retransmit=0 bytes_invalid=0 send_seq=166 receive_seq=166 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000353 adj=64002077  heater_bed: target=0 temp=24.1 pwm=0.000 raspberry_pi: temp=59.5 EBB: temp=41.6 sysload=0.76 cputime=467.765 memavail=7412080 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 393849.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2637 bytes_read=7087 bytes_retransmit=9 bytes_invalid=0 send_seq=224 receive_seq=224 retransmit_seq=2 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997861 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1605 bytes_read=6787 bytes_retransmit=0 bytes_invalid=0 send_seq=167 receive_seq=167 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000356 adj=64002139  heater_bed: target=0 temp=24.4 pwm=0.000 raspberry_pi: temp=59.0 EBB: temp=41.8 sysload=0.76 cputime=467.770 memavail=7503280 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 393850.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2643 bytes_read=7163 bytes_retransmit=9 bytes_invalid=0 send_seq=225 receive_seq=225 retransmit_seq=2 srtt=0.000 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997848 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1611 bytes_read=6919 bytes_retransmit=0 bytes_invalid=0 send_seq=168 receive_seq=168 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000356 adj=64002076  heater_bed: target=0 temp=24.0 pwm=0.000 raspberry_pi: temp=59.5 EBB: temp=41.9 sysload=0.76 cputime=467.776 memavail=7439712 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 393851.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2649 bytes_read=7224 bytes_retransmit=9 bytes_invalid=0 send_seq=226 receive_seq=226 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997834 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1617 bytes_read=7022 bytes_retransmit=0 bytes_invalid=0 send_seq=169 receive_seq=169 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000364 adj=64002183  heater_bed: target=0 temp=24.0 pwm=0.000 raspberry_pi: temp=59.5 EBB: temp=41.7 sysload=0.86 cputime=467.781 memavail=7560304 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 393852.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2655 bytes_read=7285 bytes_retransmit=9 bytes_invalid=0 send_seq=227 receive_seq=227 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997820 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1623 bytes_read=7125 bytes_retransmit=0 bytes_invalid=0 send_seq=170 receive_seq=170 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000342 adj=64002320  heater_bed: target=0 temp=24.3 pwm=0.000 raspberry_pi: temp=59.0 EBB: temp=41.8 sysload=0.86 cputime=467.785 memavail=7560080 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 393853.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2661 bytes_read=7361 bytes_retransmit=9 bytes_invalid=0 send_seq=228 receive_seq=228 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997816 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1629 bytes_read=7257 bytes_retransmit=0 bytes_invalid=0 send_seq=171 receive_seq=171 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000325 adj=64002262  heater_bed: target=0 temp=24.0 pwm=0.000 raspberry_pi: temp=57.3 EBB: temp=41.7 sysload=0.86 cputime=467.788 memavail=7560080 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 393854.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2667 bytes_read=7436 bytes_retransmit=9 bytes_invalid=0 send_seq=229 receive_seq=229 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997818 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1635 bytes_read=7374 bytes_retransmit=0 bytes_invalid=0 send_seq=172 receive_seq=172 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000342 adj=64002190  heater_bed: target=0 temp=23.9 pwm=0.000 raspberry_pi: temp=58.4 EBB: temp=41.8 sysload=0.86 cputime=467.792 memavail=7560080 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 393855.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2673 bytes_read=7497 bytes_retransmit=9 bytes_invalid=0 send_seq=230 receive_seq=230 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997842 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1641 bytes_read=7477 bytes_retransmit=0 bytes_invalid=0 send_seq=173 receive_seq=173 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000326 adj=64002300  heater_bed: target=0 temp=24.0 pwm=0.000 raspberry_pi: temp=57.3 EBB: temp=41.6 sysload=0.86 cputime=467.795 memavail=7558448 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 393856.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2679 bytes_read=7573 bytes_retransmit=9 bytes_invalid=0 send_seq=231 receive_seq=231 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997832 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1647 bytes_read=7609 bytes_retransmit=0 bytes_invalid=0 send_seq=174 receive_seq=174 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000317 adj=64002060  heater_bed: target=0 temp=24.1 pwm=0.000 raspberry_pi: temp=57.3 EBB: temp=41.7 sysload=0.79 cputime=467.799 memavail=7558000 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 393857.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2685 bytes_read=7634 bytes_retransmit=9 bytes_invalid=0 send_seq=232 receive_seq=232 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997828 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1653 bytes_read=7712 bytes_retransmit=0 bytes_invalid=0 send_seq=175 receive_seq=175 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000308 adj=64002103  heater_bed: target=0 temp=24.0 pwm=0.000 raspberry_pi: temp=56.2 EBB: temp=41.8 sysload=0.79 cputime=467.803 memavail=7557552 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 393858.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2691 bytes_read=7695 bytes_retransmit=9 bytes_invalid=0 send_seq=233 receive_seq=233 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997822 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1659 bytes_read=7815 bytes_retransmit=0 bytes_invalid=0 send_seq=176 receive_seq=176 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000302 adj=64002102  heater_bed: target=0 temp=24.0 pwm=0.000 raspberry_pi: temp=56.2 EBB: temp=41.6 sysload=0.79 cputime=467.807 memavail=7557328 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 393859.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2697 bytes_read=7785 bytes_retransmit=9 bytes_invalid=0 send_seq=234 receive_seq=234 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997821 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1665 bytes_read=7961 bytes_retransmit=0 bytes_invalid=0 send_seq=177 receive_seq=177 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000299 adj=64002133  heater_bed: target=0 temp=24.0 pwm=0.000 raspberry_pi: temp=58.4 EBB: temp=41.6 sysload=0.79 cputime=467.813 memavail=7442400 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 393860.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2703 bytes_read=7846 bytes_retransmit=9 bytes_invalid=0 send_seq=235 receive_seq=235 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997818 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1671 bytes_read=8064 bytes_retransmit=0 bytes_invalid=0 send_seq=178 receive_seq=178 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000298 adj=64002147  heater_bed: target=0 temp=24.2 pwm=0.000 raspberry_pi: temp=58.4 EBB: temp=42.0 sysload=0.79 cputime=467.818 memavail=7405920 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 393861.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2709 bytes_read=7907 bytes_retransmit=9 bytes_invalid=0 send_seq=236 receive_seq=236 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997822 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1677 bytes_read=8167 bytes_retransmit=0 bytes_invalid=0 send_seq=179 receive_seq=179 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000298 adj=64002182  heater_bed: target=0 temp=24.1 pwm=0.000 raspberry_pi: temp=59.5 EBB: temp=41.8 sysload=0.80 cputime=467.823 memavail=7500208 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 393862.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2715 bytes_read=7983 bytes_retransmit=9 bytes_invalid=0 send_seq=237 receive_seq=237 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997845 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1683 bytes_read=8299 bytes_retransmit=0 bytes_invalid=0 send_seq=180 receive_seq=180 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000298 adj=64002171  heater_bed: target=0 temp=23.9 pwm=0.000 raspberry_pi: temp=60.0 EBB: temp=41.8 sysload=0.80 cputime=467.829 memavail=7438288 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 393863.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2721 bytes_read=8044 bytes_retransmit=9 bytes_invalid=0 send_seq=238 receive_seq=238 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997842 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1689 bytes_read=8402 bytes_retransmit=0 bytes_invalid=0 send_seq=181 receive_seq=181 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000294 adj=64002029  heater_bed: target=0 temp=23.9 pwm=0.000 raspberry_pi: temp=59.5 EBB: temp=41.8 sysload=0.80 cputime=467.834 memavail=7560960 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 393864.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2727 bytes_read=8119 bytes_retransmit=9 bytes_invalid=0 send_seq=239 receive_seq=239 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997854 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1695 bytes_read=8519 bytes_retransmit=0 bytes_invalid=0 send_seq=182 receive_seq=182 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000286 adj=64002056  heater_bed: target=0 temp=24.0 pwm=0.000 raspberry_pi: temp=58.4 EBB: temp=41.8 sysload=0.80 cputime=467.838 memavail=7560960 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 393865.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2733 bytes_read=8195 bytes_retransmit=9 bytes_invalid=0 send_seq=240 receive_seq=240 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997845 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1701 bytes_read=8651 bytes_retransmit=0 bytes_invalid=0 send_seq=183 receive_seq=183 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000280 adj=64001953  heater_bed: target=0 temp=24.3 pwm=0.000 raspberry_pi: temp=58.4 EBB: temp=41.8 sysload=0.80 cputime=467.841 memavail=7561616 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 393866.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2739 bytes_read=8256 bytes_retransmit=9 bytes_invalid=0 send_seq=241 receive_seq=241 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997840 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1707 bytes_read=8754 bytes_retransmit=0 bytes_invalid=0 send_seq=184 receive_seq=184 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000277 adj=64002028  heater_bed: target=0 temp=24.0 pwm=0.000 raspberry_pi: temp=57.9 EBB: temp=41.9 sysload=0.74 cputime=467.844 memavail=7561152 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 393867.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2745 bytes_read=8317 bytes_retransmit=9 bytes_invalid=0 send_seq=242 receive_seq=242 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997832 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1713 bytes_read=8857 bytes_retransmit=0 bytes_invalid=0 send_seq=185 receive_seq=185 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000273 adj=64002085  heater_bed: target=0 temp=24.2 pwm=0.000 raspberry_pi: temp=57.9 EBB: temp=41.9 sysload=0.74 cputime=467.848 memavail=7560704 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 393868.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2751 bytes_read=8393 bytes_retransmit=9 bytes_invalid=0 send_seq=243 receive_seq=243 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997826 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1719 bytes_read=8989 bytes_retransmit=0 bytes_invalid=0 send_seq=186 receive_seq=186 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000267 adj=64002138  heater_bed: target=0 temp=24.1 pwm=0.000 raspberry_pi: temp=57.9 EBB: temp=41.8 sysload=0.74 cputime=467.851 memavail=7560480 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 393869.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2757 bytes_read=8468 bytes_retransmit=9 bytes_invalid=0 send_seq=244 receive_seq=244 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997822 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1725 bytes_read=9106 bytes_retransmit=0 bytes_invalid=0 send_seq=187 receive_seq=187 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000264 adj=64002157  heater_bed: target=0 temp=24.1 pwm=0.000 raspberry_pi: temp=55.6 EBB: temp=41.8 sysload=0.74 cputime=467.855 memavail=7559328 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 393870.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2763 bytes_read=8529 bytes_retransmit=9 bytes_invalid=0 send_seq=245 receive_seq=245 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997817 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1731 bytes_read=9209 bytes_retransmit=0 bytes_invalid=0 send_seq=188 receive_seq=188 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000260 adj=64002174  heater_bed: target=0 temp=24.0 pwm=0.000 raspberry_pi: temp=56.8 EBB: temp=41.7 sysload=0.74 cputime=467.860 memavail=7559104 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 393871.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2769 bytes_read=8605 bytes_retransmit=9 bytes_invalid=0 send_seq=246 receive_seq=246 retransmit_seq=2 srtt=0.000 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997827 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1737 bytes_read=9341 bytes_retransmit=0 bytes_invalid=0 send_seq=189 receive_seq=189 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000255 adj=64002186  heater_bed: target=0 temp=24.1 pwm=0.000 raspberry_pi: temp=59.5 EBB: temp=41.7 sysload=1.16 cputime=467.866 memavail=7445392 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 393872.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2775 bytes_read=8666 bytes_retransmit=9 bytes_invalid=0 send_seq=247 receive_seq=247 retransmit_seq=2 srtt=0.000 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997824 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1743 bytes_read=9444 bytes_retransmit=0 bytes_invalid=0 send_seq=190 receive_seq=190 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000255 adj=64002068  heater_bed: target=0 temp=24.1 pwm=0.000 raspberry_pi: temp=60.0 EBB: temp=41.6 sysload=1.16 cputime=467.872 memavail=7403632 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 393873.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2781 bytes_read=8727 bytes_retransmit=9 bytes_invalid=0 send_seq=248 receive_seq=248 retransmit_seq=2 srtt=0.000 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997819 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1749 bytes_read=9547 bytes_retransmit=0 bytes_invalid=0 send_seq=191 receive_seq=191 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000260 adj=64002122  heater_bed: target=0 temp=23.9 pwm=0.000 raspberry_pi: temp=59.0 EBB: temp=41.8 sysload=1.16 cputime=467.879 memavail=7499728 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 393874.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2787 bytes_read=8817 bytes_retransmit=9 bytes_invalid=0 send_seq=249 receive_seq=249 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997816 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1755 bytes_read=9693 bytes_retransmit=0 bytes_invalid=0 send_seq=192 receive_seq=192 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000260 adj=64002227  heater_bed: target=0 temp=24.0 pwm=0.000 raspberry_pi: temp=61.7 EBB: temp=41.7 sysload=1.16 cputime=467.886 memavail=7437328 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 393875.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2793 bytes_read=8878 bytes_retransmit=9 bytes_invalid=0 send_seq=250 receive_seq=250 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997815 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1761 bytes_read=9796 bytes_retransmit=0 bytes_invalid=0 send_seq=193 receive_seq=193 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000258 adj=64002241  heater_bed: target=0 temp=24.1 pwm=0.000 raspberry_pi: temp=59.5 EBB: temp=41.7 sysload=1.16 cputime=467.891 memavail=7558704 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 393876.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2799 bytes_read=8939 bytes_retransmit=9 bytes_invalid=0 send_seq=251 receive_seq=251 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997812 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1767 bytes_read=9899 bytes_retransmit=0 bytes_invalid=0 send_seq=194 receive_seq=194 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000257 adj=64002224  heater_bed: target=0 temp=23.9 pwm=0.000 raspberry_pi: temp=59.0 EBB: temp=41.8 sysload=1.07 cputime=467.895 memavail=7561728 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 393877.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2805 bytes_read=9015 bytes_retransmit=9 bytes_invalid=0 send_seq=252 receive_seq=252 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997811 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1773 bytes_read=10031 bytes_retransmit=0 bytes_invalid=0 send_seq=195 receive_seq=195 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000255 adj=64002235  heater_bed: target=0 temp=24.0 pwm=0.000 raspberry_pi: temp=57.9 EBB: temp=41.9 sysload=1.07 cputime=467.898 memavail=7561120 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 393878.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2811 bytes_read=9076 bytes_retransmit=9 bytes_invalid=0 send_seq=253 receive_seq=253 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997812 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1785 bytes_read=10150 bytes_retransmit=0 bytes_invalid=0 send_seq=197 receive_seq=197 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000255 adj=64002213  heater_bed: target=0 temp=24.2 pwm=0.000 raspberry_pi: temp=57.9 EBB: temp=41.6 sysload=1.07 cputime=467.902 memavail=7561120 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 393879.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2817 bytes_read=9137 bytes_retransmit=9 bytes_invalid=0 send_seq=254 receive_seq=254 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997809 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1791 bytes_read=10267 bytes_retransmit=0 bytes_invalid=0 send_seq=198 receive_seq=198 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000254 adj=64002202  heater_bed: target=0 temp=23.9 pwm=0.000 raspberry_pi: temp=58.4 EBB: temp=41.8 sysload=1.07 cputime=467.905 memavail=7559984 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 393880.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2823 bytes_read=9227 bytes_retransmit=9 bytes_invalid=0 send_seq=255 receive_seq=255 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997805 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1797 bytes_read=10399 bytes_retransmit=0 bytes_invalid=0 send_seq=199 receive_seq=199 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000250 adj=64002215  heater_bed: target=0 temp=24.0 pwm=0.000 raspberry_pi: temp=57.9 EBB: temp=41.8 sysload=1.07 cputime=467.909 memavail=7558816 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 393881.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2829 bytes_read=9288 bytes_retransmit=9 bytes_invalid=0 send_seq=256 receive_seq=256 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997803 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1803 bytes_read=10502 bytes_retransmit=0 bytes_invalid=0 send_seq=200 receive_seq=200 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000249 adj=64002206  heater_bed: target=0 temp=24.1 pwm=0.000 raspberry_pi: temp=56.2 EBB: temp=41.7 sysload=0.98 cputime=467.913 memavail=7558352 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 393882.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2835 bytes_read=9349 bytes_retransmit=9 bytes_invalid=0 send_seq=257 receive_seq=257 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997801 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1809 bytes_read=10605 bytes_retransmit=0 bytes_invalid=0 send_seq=201 receive_seq=201 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000248 adj=64002211  heater_bed: target=0 temp=24.0 pwm=0.000 raspberry_pi: temp=56.2 EBB: temp=41.8 sysload=0.98 cputime=467.918 memavail=7558352 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 393883.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2841 bytes_read=9425 bytes_retransmit=9 bytes_invalid=0 send_seq=258 receive_seq=258 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997800 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1815 bytes_read=10737 bytes_retransmit=0 bytes_invalid=0 send_seq=202 receive_seq=202 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000249 adj=64002216  heater_bed: target=0 temp=23.9 pwm=0.000 raspberry_pi: temp=56.8 EBB: temp=41.7 sysload=0.98 cputime=467.924 memavail=7443680 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 393884.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2847 bytes_read=9486 bytes_retransmit=9 bytes_invalid=0 send_seq=259 receive_seq=259 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997799 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1821 bytes_read=10840 bytes_retransmit=0 bytes_invalid=0 send_seq=203 receive_seq=203 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000250 adj=64002225  heater_bed: target=0 temp=24.0 pwm=0.000 raspberry_pi: temp=60.0 EBB: temp=41.6 sysload=0.98 cputime=467.930 memavail=7401440 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 393885.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2853 bytes_read=9561 bytes_retransmit=9 bytes_invalid=0 send_seq=260 receive_seq=260 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997801 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1827 bytes_read=10957 bytes_retransmit=0 bytes_invalid=0 send_seq=204 receive_seq=204 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000252 adj=64002245  heater_bed: target=0 temp=24.0 pwm=0.000 raspberry_pi: temp=60.0 EBB: temp=41.8 sysload=0.98 cputime=467.936 memavail=7503616 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 393886.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2859 bytes_read=9637 bytes_retransmit=9 bytes_invalid=0 send_seq=261 receive_seq=261 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997800 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1833 bytes_read=11089 bytes_retransmit=0 bytes_invalid=0 send_seq=205 receive_seq=205 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000252 adj=64002237  heater_bed: target=0 temp=24.0 pwm=0.000 raspberry_pi: temp=60.6 EBB: temp=41.7 sysload=1.06 cputime=467.941 memavail=7441216 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 393887.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2865 bytes_read=9697 bytes_retransmit=9 bytes_invalid=0 send_seq=262 receive_seq=262 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997799 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1839 bytes_read=11192 bytes_retransmit=0 bytes_invalid=0 send_seq=206 receive_seq=206 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000250 adj=64002246  heater_bed: target=0 temp=23.9 pwm=0.000 raspberry_pi: temp=59.0 EBB: temp=41.8 sysload=1.06 cputime=467.946 memavail=7561216 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 393888.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000007 bytes_write=2871 bytes_read=9754 bytes_retransmit=9 bytes_invalid=0 send_seq=263 receive_seq=263 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=71997798 EBB: mcu_awake=0.002 mcu_task_avg=0.000010 mcu_task_stddev=0.000010 bytes_write=1845 bytes_read=11295 bytes_retransmit=0 bytes_invalid=0 send_seq=207 receive_seq=207 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000248 adj=64002225  heater_bed: target=0 temp=24.0 pwm=0.000 raspberry_pi: temp=59.0 EBB: temp=41.8 sysload=1.06 cputime=467.949 memavail=7562224 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Starting Klippy...
Args: ['/home/blackaxis/klipper/klippy/klippy.py', '/home/blackaxis/Ender3_data/config/printer.cfg', '-I', '/home/blackaxis/Ender3_data/comms/klippy.serial', '-l', '/home/blackaxis/Ender3_data/logs/klippy.log', '-a', '/home/blackaxis/Ender3_data/comms/klippy.sock']
Git version: 'v0.12.0-207-g6cd17420'
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.11.2 (main, Mar 13 2023, 12:18:29) [GCC 12.2.0]'
Start printer at Mon Jun 17 06:04:40 2024 (1718618680.6 25.5)
===== Config file =====
[virtual_sdcard]
path = /home/blackaxis/Ender3_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[respond]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	M400
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
	{% set retract = client.cancel_retract|default(1)|abs %}
	{% set BED_TEMP = params.BED|default(60)|float %}
	{% set TOOL_TEMP = params.EXTRUDER|default(175)|float %}
	
	{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
	else "X=" ~ client.park_at_cancel_x %}
	{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
	else "Y=" ~ client.park_at_cancel_y %}
	{% set custom_park = park_x|length > 0 or park_y|length > 0 %}
	
	
	{% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
	{% endif %}
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	{client.user_cancel_macro|default("")}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
	{% set restore = False if printer.toolhead.extruder == ''
	else True  if params.RESTORE|default(1)|int == 1 else False %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	{client.user_pause_macro|default("")}
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	{% set runout_resume = True if client.runout_sensor|default("") == ""
	else True if not printer[client.runout_sensor].enabled
	else printer[client.runout_sensor].filament_detected %}
	{% set can_extrude = True if printer.toolhead.extruder == ''
	else printer[printer.toolhead.extruder].can_extrude %}
	{% set do_resume = False %}
	{% set prompt_txt = [] %}
	
	
	{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	{% if last_extruder_temp.restore %}
	
	RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
	M109 S{last_extruder_temp.temp}
	{% set do_resume = True %}
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	{% if runout_resume %}
	{% if do_resume %}
	{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}
	{client.user_resume_macro|default("")}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
	{% endif %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
	{% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
	{% endif %}
	
	{% if not (runout_resume and do_resume) %}
	RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
	{% for element in prompt_txt %}
	RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}'
	{% endfor %}
	RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
	RESPOND TYPE=command MSG="action:prompt_show"
	{% endif %}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro PRINT_START]
gcode = 
	START_PRINT {rawparams}

[gcode_macro PRINT_END]
gcode = 
	END_PRINT {rawparams}

[gcode_macro START_PRINT]
gcode = 
	G28
	{% set BED_TEMP = params.BED|default(96)|float %}
	{% set TOOL_TEMP = params.EXTRUDER|default(200)|float %}
	M104 S{TOOL_TEMP}
	M190 S{BED_TEMP}
	M107
	
	G21
	G90
	M82
	G92 E0
	G28
	BED_MESH_CALIBRATE ADAPTIVE=1 ADAPTIVE_MARGIN=10
	G1 Z10 F3000
	M190 S{BED_TEMP}
	M109 S{TOOL_TEMP}
	G92 E0
	SKEW_PROFILE LOAD=skew_profile
	LINE_PURGE

[gcode_macro FILAMENT_START]
gcode = 
	{% set material = params.MATERIAL|default("PLA") %}
	{% set vendor = params.VENDOR|default("Unknown") %}
	{% set color = params.COLOR|default("Unknown") %}
	{% set pa_constant = {'PLA': 0.055, 'PETG': 0.055, 'ABS': 0.055, 'ASA': 0.1540, 'Nylon': 0.055, 'TPU': 0.055, 'PVB': 0.055}[material] %}
	{% set retraction_speed = {'PLA': 65, 'PETG': 65, 'ABS': 65, 'ASA': 65, 'Nylon': 65, 'TPU': 65, 'PVB': 65}[material] %}
	{% set detraction_speed = {'PLA': 65, 'PETG': 65, 'ABS': 65, 'ASA': 65, 'Nylon': 65, 'TPU': 65, 'PVB': 65}[material] %}
	{% set retraction = {'PLA': 0.4, 'PETG': 0.4, 'ABS': 0.4, 'ASA': 0.4, 'Nylon': 0.4, 'TPU': 0.4, 'PVB': 0.4}[material] %}

[gcode_macro CALCULATE_PA]
gcode = 
	{% set material = params.MATERIAL|default("PLA") %}
	{% set bowden_length = (params.BOWDEN_LENGTH|default(5.5)|float) / 10 %}
	{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}
	{% set nozzle_size = params.NOZZLE_SIZE|default(0.4)|float %}
	{% set print_speed = params.PRINT_SPEED|default(150)|float %}
	{% set material_constant = {'PLA': 100, 'PETG': 120, 'ABS': 110, 'ASA': 84, 'Nylon': 130, 'TPU': 150, 'PVB': 100}[material] %}
	{% set vfr = nozzle_size * layer_height * print_speed %}
	{% set pressure_advance = (vfr * bowden_length) / material_constant %}
	
	SET_PRESSURE_ADVANCE ADVANCE={pressure_advance}

[gcode_macro BEFORE_LAYER_CHANGE]
gcode = 
	{% set layer_num_prev = params.LAYER_NUM|default(0) %}
	{% set layer_h_prev = params.LAYER_Z|default(0)|float %}
	{% set layer_h_max = params.LAYER_MAX_Z|default(100)|float %}
	{% set material = params.MATERIAL|default("PLA") %}
	{% set nozzle_size_prev = params.NOZZLE_SIZE|default(0.4)|float %}
	{% set total_layer_count = params.TOTAL_LAYER_COUNT|default(3000)|float %}
	{% set max_print_speed = params.MAX_PRINT_SPEED|default(150)|float %}

[gcode_macro AFTER_LAYER_CHANGE]
description = After layer change housekeeping
gcode = 
	{% set layer_num_prev = params.LAYER_NUM|default(0) %}
	{% set layer_h_prev = params.LAYER_Z|default(0)|float %}
	{% set layer_h_max = params.LAYER_MAX_Z|default(100)|float %}
	{% set material = params.MATERIAL|default("PLA") %}
	{% set nozzle_size_prev = params.NOZZLE_SIZE|default(0.4)|float %}
	{% set total_layer_count = params.TOTAL_LAYER_COUNT|default(3000)|float %}
	{% set max_print_speed = params.MAX_PRINT_SPEED|default(150)|float %}

[gcode_macro END_PRINT]
gcode = 
	{% set bound = params.BOUND|default(20)|int %}
	{% set BED_MAX_X = printer.toolhead.axis_maximum.x - bound %}
	{% set BED_MAX_Y = printer.toolhead.axis_maximum.y - bound %}
	{% set BED_MAX_Z = printer.toolhead.axis_maximum.z - bound %}
	
	
	SET_SKEW CLEAR=1
	
	
	M140 S0
	M104 S0
	M106 S0
	
	G91
	G1 X-2 Y-2 E-0.8 F3000
	
	G1 Z10 F2000
	G90
	G1 X{BED_MAX_X} Y{BED_MAX_Y} F1000

[homing_override]
axes = xyz
set_position_z = 0
gcode = 
	
	{% set CURRENTLESS = 0 %}
	{% set PROBE_X = 133 %}
	{% set PROBE_Y = 110 %}
	{% set PROBE_XY_SPEED = 60 %}
	{% set MOVE_TO_PREVIOUS = False %}
	
	{% set MOVE_TO_PREV_SPEED = 50 %}
	{% set HOMING_BOUNCE = 5.0 %}
	{% set BOUNCE_SPEED = 25 %}
	{% set Z_HOP = 5 %}
	{% set Z_HOP_SPEED = 10 %}
	
	{% set X_HOMING_CUR = 1.000 %}
	{% set Y_HOMING_CUR = 1.000 %}
	{% set HOMING_ACCEL = 700 %}
	
	{% set PAUSE = 1000 %}
	
	{% set SAFETY_HOP = 5 %}
	{% set SAFETY_HOP_SPEED = 5 %}
	
	
	
	{% set cur_accel = printer.toolhead.max_accel %}
	{% set cur_accel_to_decel = printer.toolhead.max_accel_to_decel %}
	
	{% set requested = {'x': False,
	'y': False,
	'z': False} %}
	{% if   not 'X' in params
	and not 'Y' in params
	and not 'Z' in params %}
	{% set X, Y, Z = True, True, True %}
	{% else %}
	{% if 'X' in params %}
	{% set X = True %}
	{% set null = requested.update({'x': True}) %}
	{% endif %}
	{% if 'Y' in params %}
	{% set Y = True %}
	{% set null = requested.update({'y': True}) %}
	{% endif %}
	{% if 'Z' in params %}
	{% set Z = True %}
	{% set null = requested.update({'z': True}) %}
	{% endif %}
	{% endif %}
	
	
	
	
	{% if not "xyz" in printer.toolhead.homed_axes %}
	G1 Z{SAFETY_HOP} F{(SAFETY_HOP_SPEED * 60)}
	{% endif %}
	
	
	{% if MOVE_TO_PREVIOUS %}
	SAVE_GCODE_STATE NAME=homing
	{% endif %}
	
	
	{% if CURRENTLESS != 1 %}
	{% if X and Y %}
	SENSORLESS_HOME_ALL X_CUR={X_HOMING_CUR} Y_CUR={Y_HOMING_CUR} ACCEL={HOMING_ACCEL} BOUNCE={HOMING_BOUNCE} BOUNCE_SPEED={BOUNCE_SPEED} PAUSE={PAUSE}
	{% elif X %}
	SENSORLESS_HOME_X CURRENT={X_HOMING_CUR} ACCEL={HOMING_ACCEL} BOUNCE={HOMING_BOUNCE} BOUNCE_SPEED={BOUNCE_SPEED} PAUSE={PAUSE}
	{% elif Y %}
	SENSORLESS_HOME_Y CURRENT={Y_HOMING_CUR} ACCEL={HOMING_ACCEL} BOUNCE={HOMING_BOUNCE} BOUNCE_SPEED={BOUNCE_SPEED} PAUSE={PAUSE}
	{% endif %}
	{% else %}
	{% if X and Y %}
	SENSOR_HOME_ALL ACCEL={HOMING_ACCEL} BOUNCE={HOMING_BOUNCE} BOUNCE_SPEED={BOUNCE_SPEED} PAUSE={PAUSE}
	{% elif X %}
	SENSOR_HOME_X ACCEL={HOMING_ACCEL} BOUNCE={HOMING_BOUNCE} BOUNCE_SPEED={BOUNCE_SPEED} PAUSE={PAUSE}
	{% elif Y %}
	SENSOR_HOME_Y ACCEL={HOMING_ACCEL} BOUNCE={HOMING_BOUNCE} BOUNCE_SPEED={BOUNCE_SPEED} PAUSE={PAUSE}
	{% endif %}
	{% endif %}
	
	
	{% if Z %}
	G1 X{PROBE_X} Y{PROBE_Y} F{(PROBE_XY_SPEED * 60)}
	G28 Z
	G1 Z{Z_HOP} F{(Z_HOP_SPEED * 60)}
	{% endif %}
	
	
	{% if MOVE_TO_PREVIOUS %}
	{% if MOVE_TO_PREV_SPEED == 0 %}
	RESTORE_GCODE_STATE NAME=homing MOVE=1
	{% else %}
	RESTORE_GCODE_STATE NAME=homing MOVE=1 MOVE_SPEED={MOVE_TO_PREV_SPEED}
	{% endif %}
	{% endif %}
	
	
	{% if printer.toolhead.max_accel != cur_accel %}
	SET_VELOCITY_LIMIT ACCEL={cur_accel} ACCEL_TO_DECEL={cur_accel_to_decel}
	{% endif %}

[gcode_macro SENSORLESS_HOME_ALL]
description = Home XY with modified current
gcode = 
	{% set HOME_CUR_X = params.X_CUR|default(0.250)|float %}
	{% set HOME_CUR_Y = params.Y_CUR|default(0.250)|float %}
	{% set HOME_ACCEL = params.ACCEL|default(1000)|float %}
	{% set BOUNCE = params.BOUNCE|default(10)|float %}
	{% set BOUNCE_SPEED = params.BOUNCE_SPEED|default(20)|float %}
	{% set driver_config_x = printer.configfile.settings['tmc2209 stepper_x'] %}
	{% set driver_config_y = printer.configfile.settings['tmc2209 stepper_y'] %}
	{% set RUN_CUR_X = driver_config_x.run_current %}
	{% set RUN_CUR_Y = driver_config_y.run_current %}
	{% set PAUSE = params.PAUSE|default(2000)|int %}
	
	
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR_X}
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CUR_Y}
	
	SET_VELOCITY_LIMIT ACCEL={HOME_ACCEL} ACCEL_TO_DECEL={(HOME_ACCEL * 0.5)}
	
	G4 P{PAUSE}
	
	G28 X0
	{% if BOUNCE %}
	
	G91
	G1 X{BOUNCE} F{(BOUNCE_SPEED * 60)}
	G90
	{% endif %}
	
	G28 Y0
	{% if BOUNCE %}
	
	G91
	G1 Y{BOUNCE} F{(BOUNCE_SPEED * 60)}
	G90
	{% endif %}
	
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CUR_X}
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CUR_Y}
	
	G4 P{PAUSE}

[gcode_macro SENSORLESS_HOME_X]
description = Home X with modified current
gcode = 
	{% set HOME_CUR = params.CURRENT|default(0.250)|float %}
	{% set HOME_ACCEL = params.ACCEL|default(1000)|float %}
	{% set BOUNCE = params.BOUNCE|default(10)|float %}
	{% set BOUNCE_SPEED = params.BOUNCE_SPEED|default(20)|float %}
	{% set driver_config = printer.configfile.settings['tmc2209 stepper_x'] %}
	{% set RUN_CUR = driver_config.run_current %}
	{% set PAUSE = params.PAUSE|default(2000)|int %}
	
	
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR}
	
	SET_VELOCITY_LIMIT ACCEL={HOME_ACCEL} ACCEL_TO_DECEL={(HOME_ACCEL * 0.5)}
	
	G4 P{PAUSE}
	
	G28 X0
	{% if BOUNCE %}
	
	G91
	G1 X{BOUNCE} F{(BOUNCE_SPEED * 60)}
	G90
	{% endif %}
	
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CUR}
	
	G4 P{PAUSE}

[gcode_macro SENSORLESS_HOME_Y]
description = Home Y with modified current
gcode = 
	{% set HOME_CUR = params.CURRENT|default(0.250)|float %}
	{% set HOME_ACCEL = params.ACCEL|default(1000)|float %}
	{% set BOUNCE = params.BOUNCE|default(10)|float %}
	{% set BOUNCE_SPEED = params.BOUNCE_SPEED|default(20)|float %}
	{% set driver_config = printer.configfile.settings['tmc2209 stepper_y'] %}
	{% set RUN_CUR = driver_config.run_current %}
	{% set PAUSE = params.PAUSE|default(2000)|int %}
	
	
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CUR}
	
	SET_VELOCITY_LIMIT ACCEL={HOME_ACCEL} ACCEL_TO_DECEL={(HOME_ACCEL * 0.5)}
	
	G4 P{PAUSE}
	
	G28 Y0
	{% if BOUNCE %}
	
	G91
	G1 Y{BOUNCE} F{(BOUNCE_SPEED * 60)}
	G90
	{% endif %}
	
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CUR}
	
	G4 P{PAUSE}

[gcode_macro SENSOR_HOME_ALL]
description = Home XY
gcode = 
	{% set HOME_ACCEL = params.ACCEL|default(1000)|float %}
	{% set BOUNCE = params.BOUNCE|default(10)|float %}
	{% set BOUNCE_SPEED = params.BOUNCE_SPEED|default(20)|float %}
	{% set PAUSE = params.PAUSE|default(2000)|int %}
	
	
	SET_VELOCITY_LIMIT ACCEL={HOME_ACCEL} ACCEL_TO_DECEL={(HOME_ACCEL * 0.5)}
	
	G4 P{PAUSE}
	
	G28 X0
	{% if BOUNCE %}
	
	G91
	G1 X{BOUNCE} F{(BOUNCE_SPEED * 60)}
	G90
	{% endif %}
	
	G28 Y0
	{% if BOUNCE %}
	
	G91
	G1 Y{BOUNCE} F{(BOUNCE_SPEED * 60)}
	G90
	{% endif %}
	
	G4 P{PAUSE}

[gcode_macro SENSOR_HOME_X]
description = Home X
gcode = 
	{% set HOME_ACCEL = params.ACCEL|default(1000)|float %}
	{% set BOUNCE = params.BOUNCE|default(10)|float %}
	{% set BOUNCE_SPEED = params.BOUNCE_SPEED|default(20)|float %}
	{% set PAUSE = params.PAUSE|default(2000)|int %}
	
	
	SET_VELOCITY_LIMIT ACCEL={HOME_ACCEL} ACCEL_TO_DECEL={(HOME_ACCEL * 0.5)}
	
	G4 P{PAUSE}
	
	G28 X0
	{% if BOUNCE %}
	
	G91
	G1 X{BOUNCE} F{(BOUNCE_SPEED * 60)}
	G90
	{% endif %}
	
	G4 P{PAUSE}

[gcode_macro SENSOR_HOME_Y]
description = Home Y
gcode = 
	{% set HOME_ACCEL = params.ACCEL|default(1000)|float %}
	{% set BOUNCE = params.BOUNCE|default(10)|float %}
	{% set BOUNCE_SPEED = params.BOUNCE_SPEED|default(20)|float %}
	{% set PAUSE = params.PAUSE|default(2000)|int %}
	
	
	SET_VELOCITY_LIMIT ACCEL={HOME_ACCEL} ACCEL_TO_DECEL={(HOME_ACCEL * 0.5)}
	
	G4 P{PAUSE}
	
	G28 Y0
	{% if BOUNCE %}
	
	G91
	G1 Y{BOUNCE} F{(BOUNCE_SPEED * 60)}
	G90
	{% endif %}
	
	G4 P{PAUSE}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(printer.configfile.config["stepper_x"]["position_endstop"]|string)|int %}
	{% set Y = params.Y|default(printer.configfile.config["stepper_y"]["position_endstop"]|string)|int %}
	{% set Z = params.Z|default(10)|int %}
	{% set E = params.E|default(-20)|int %}
	{% set tool = params.tool|default(0)|int %}
	PAUSE
	G91
	G1 E-5 F4000
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G0 E10 F500
	G0 E{E} F600
	G92 E0

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	M400
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	M400
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.minimum_cruise_ratio}
	
	
	M400
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[gcode_macro DUMP_VARIABLES]
gcode = 
	{% set filter_name = params.NAME|default('')|string|lower %}
	{% set filter_value = params.VALUE|default('')|string|lower %}
	{% set show_cfg = params.SHOW_CFG|default(0)|int %}
	
	{% set out = [] %}
	
	{% for key1 in printer %}
	{% for key2 in printer[key1] %}
	{% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
	{% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
	{% endif %}
	{% else %}
	{% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
	{% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	{action_respond_info(out|join("\n"))}

[gcode_macro GET_VARIABLE]
gcode = 
	{% set names = (params.NAME).split('.')|list %}
	{% set join = (params.JOIN)|default(1)|int %}
	
	{% set _dummy0 = namespace( break = 0 ) %}
	{% set _dummy1 = namespace( out = printer[names|first] ) %}
	
	{% for name in names if _dummy0.break == 0 %}
	{% if loop.index > 1 %}
	{% if name in _dummy1.out %}
	{% set _dummy1.out = _dummy1.out[name] %}
	{% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
	{% set _dummy1.out = _dummy1.out[name|int] %}
	{% else %}
	{% set _dummy0.break = loop.index0 %}
	{% endif %}
	{% endif %}
	{% endfor %}
	
	{% if _dummy1.out is boolean %}
	{ action_respond_info('Type: boolean') }
	{% elif _dummy1.out is float %}
	{ action_respond_info('Type: float') }
	{% elif _dummy1.out is integer %}
	{ action_respond_info('Type: integer') }
	{% elif _dummy1.out is mapping %}
	{ action_respond_info('Type: mapping') }
	{% elif _dummy1.out is string %}
	{ action_respond_info('Type: string') }
	{% elif _dummy1.out is iterable %}
	{ action_respond_info('Type: iterable') }
	{% elif _dummy1.out is none %}
	{ action_respond_info('Type: none') }
	{% elif _dummy1.out is undefined %}
	{ action_respond_info('Type: undefined') }
	{% elif _dummy1.out is callable %}
	{ action_respond_info('Type: callable') }
	{% else %}
	{ action_respond_info('Type: unknown') }
	{% endif %}
	
	{% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
	{ action_respond_info('%s' % _dummy1.out|join("\n")) }
	{% else %}
	{ action_respond_info('%s' % _dummy1.out) }
	{% endif %}
	
	{% if _dummy0.break != 0 %}
	{ action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
	{% endif %}

[gcode_macro M109]
rename_existing = M99109
gcode = 
	
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro M190]
rename_existing = M99190
gcode = 
	
	{% set s = params.S|float %}
	
	M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[save_variables]
filename = ender3_variables.cfg

[exclude_object]

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}
	{% set attach_macro = kamp_settings.attach_macro | string %}
	{% set detach_macro = kamp_settings.detach_macro | string %}
	{% set mesh_margin = kamp_settings.mesh_margin | float %}
	{% set fuzz_amount = kamp_settings.fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	{% if printer.exclude_object.objects != [] %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% else %}
	
	{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}
	G4 P5000
	{% endif %}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 0
variable_fuzz_amount = 0
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 20
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[idle_timeout]
timeout = 1800

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32f103xe_37FFDD054253373706802457-if00

[board_pins]
aliases = 
	EXP1_1=<5V>,EXP1_2=<GND>,EXP1_3=PB15,EXP1_4=PB8,EXP1_5=PB9,
	EXP1_6=PA10,EXP1_7=<RESET>,EXP1_8=PA9,EXP1_9=PA15,EXP1_10=PB5,

[mcu EBB]
canbus_uuid = 44886b422df2

[printer]
kinematics = cartesian
max_velocity = 500
max_accel = 1500
minimum_cruise_ratio = 0.4
square_corner_velocity = 5
max_z_accel = 42

[skew_correction]

[screws_tilt_adjust]
screw1 = 40, 180
screw1_name = Back_L
screw2 = 175, 180
screw2_name = Back_R
screw3 = 40, 21
screw3_name = Front_L
screw4 = 175, 21
screw4_name = Front_R
speed = 50
horizontal_move_z = 20

[z_tilt]
z_positions = -40, 200
	198,200
points = 40, 198
	40, 198
	40, 21
	172, 21
speed = 50
horizontal_move_z = 5

[bed_screws]
screw1 = 40, 170
screw1_name = Back_L
screw2 = 172, 170
screw2_name = Back_R
screw3 = 40, 21
screw3_name = Front_L
screw4 = 172, 21
screw4_name = Front_R
speed = 50
horizontal_move_z = 20

[bltouch]
stow_on_each_sample = false
probe_with_touch_mode = true
sensor_pin = ^EBB: PB8
control_pin = EBB: PB9
pin_move_time = 0.5
x_offset = -55
y_offset = -10
speed = 8
lift_speed = 7
samples_tolerance = 0.01
samples = 3
sample_retract_dist = 3
samples_tolerance_retries = 5
z_offset = 0.425

[bed_mesh]
adaptive_margin = 5
speed = 1000
horizontal_move_z = 3
mesh_min = 0, 0
mesh_max = 100, 100
probe_count = 7, 7
algorithm = bicubic

[homing_heaters]
heaters = extruder, heater_bed

[stepper_x]
step_pin = PB13
dir_pin = !PB12
enable_pin = !PB14
endstop_pin = tmc2209_stepper_x:virtual_endstop
microsteps = 64
homing_retract_dist = 0
rotation_distance = 40
position_endstop = 0
position_min = 0
position_max = 180
homing_speed = 60

[tmc2209 stepper_x]
uart_pin = PC11
tx_pin = PC10
diag_pin = ^PC0
uart_address = 0
interpolate = false
run_current = 0.88
driver_sgthrs = 95

[stepper_y]
step_pin = PB10
dir_pin = !PB2
enable_pin = !PB11
endstop_pin = tmc2209_stepper_y:virtual_endstop
homing_retract_dist = 0
microsteps = 64
rotation_distance = 40
position_min = 0
position_endstop = 0
position_max = 185
homing_speed = 65

[tmc2209 stepper_y]
uart_pin = PC11
tx_pin = PC10
diag_pin = ^PC1
interpolate = false
uart_address = 2
run_current = 0.7
driver_sgthrs = 100

[stepper_z]
step_pin = PB0
dir_pin = PC5
enable_pin = !PB1
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
microsteps = 64
position_max = 230
position_min = -5
homing_speed = 5

[tmc2209 stepper_z]
uart_pin = PC11
tx_pin = PC10
uart_address = 1
interpolate = false
run_current = .88

[stepper_z1]
step_pin = PB3
dir_pin = !PB4
enable_pin = !PD2
rotation_distance = 8
microsteps = 64

[tmc2209 stepper_z1]
uart_pin = PC11
tx_pin = PC10
uart_address = 3
interpolate = false
run_current = .88

[extruder]
step_pin = EBB: PD0
dir_pin = EBB: PD1
enable_pin = !EBB: PD2
microsteps = 64
rotation_distance = 23.003
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = EBB: PB13
sensor_type = Generic 3950
sensor_pin = EBB: PA3
min_temp = 0
max_temp = 300
max_extrude_cross_section = 5
pid_kp = 22.616
pid_ki = 1.311
pid_kd = 97.530
control = pid

[firmware_retraction]
retract_length = 0.4
retract_speed = 80
unretract_extra_length = 0
unretract_speed = 80

[gcode_arcs]
resolution = 1.0

[tmc2209 extruder]
uart_pin = EBB: PA15
run_current = 0.8
interpolate = false

[verify_heater extruder]
max_error = 240
check_gain_time = 60

[verify_heater heater_bed]
check_gain_time = 120
hysteresis = 5
heating_gain = 1

[heater_bed]
heater_pin = PC9
sensor_type = Generic 3950
sensor_pin = PC3
min_temp = 0
max_temp = 130
control = pid
pid_kp = 67.317
pid_ki = 1.506
pid_kd = 752.271

[heater_fan nozzle_cooling_fan]
pin = EBB: PA1
heater = extruder
heater_temp = 50.0

[fan]
pin = EBB: PA0

[static_digital_output usb_pullup_enable]
pins = !PA14

[neopixel my_neopixel]
pin = PA8
chain_count = 18
initial_red = 1
initial_green = 1
initial_blue = 1

[neopixel hotend_rgb]
pin = EBB: PD3

[adxl345]
cs_pin = EBB: PB12
spi_software_sclk_pin = EBB: PB10
spi_software_mosi_pin = EBB: PB11
spi_software_miso_pin = EBB: PB2
axes_map = x,y,z

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor EBB]
sensor_type = temperature_mcu
sensor_mcu = EBB
min_temp = 0
max_temp = 160

[bed_mesh default]
version = 1
points = 
	0.050417, 0.164583, 0.165000
	0.003125, 0.060000, 0.053125
	-0.038958, 0.002917, -0.110000
tension = 0.2
min_x = 82.61000000000001
algo = lagrange
y_count = 3
mesh_y_pps = 2
min_y = 69.21
x_count = 3
max_y = 99.99
mesh_x_pps = 2
max_x = 97.38999999999999

[skew_correction my_skew_profile]
xy_skew = -0.003552463343554649
xz_skew = 0.0
yz_skew = 0.0

[skew_correction skew_profile]
xy_skew = -0.005919001874824016
xz_skew = 0.0
yz_skew = 0.0
=======================
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting serial connect
Loaded MCU 'mcu' 112 commands (v0.12.0-61-gb50d6669 / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.34-4+rpi1+14) 2.34)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1=PB6,PB7 BUS_PINS_i2c1a=PB8,PB9 BUS_PINS_i2c2=PB10,PB11 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=72000000 INITIAL_PINS=!PA14 MCU=stm32f103xe PWM_MAX=255 RESERVE_PINS_USB=PA11,PA12 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu 'EBB': Starting CAN connect
Created a socket
Loaded MCU 'EBB' 108 commands (v0.12.0-102-g9f41f53c / gcc: (15:12.2.rel1-1) 12.2.1 20221205 binutils: (2.40-2+18+b1) 2.40)
MCU 'EBB' config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CANBUS_FREQUENCY=500000 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_CAN=PB0,PB1 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu_temperature 'EBB' nominal base=-269.710145 slope=1305.652174
Sending MCU 'mcu' printer configuration...
Configured MCU 'mcu' (1024 moves)
Sending MCU 'EBB' printer configuration...
Configured MCU 'EBB' (1024 moves)
bed_mesh: generated points
Index |  Tool Adjusted  |   Probe
  0   | (55.0, 10.0)    | (0.0, 0.0)
  1   | (71.7, 10.0)    | (16.7, 0.0)
  2   | (88.3, 10.0)    | (33.3, 0.0)
  3   | (105.0, 10.0)   | (50.0, 0.0)
  4   | (121.6, 10.0)   | (66.6, 0.0)
  5   | (138.3, 10.0)   | (83.3, 0.0)
  6   | (155.0, 10.0)   | (100.0, 0.0)
  7   | (155.0, 26.7)   | (100.0, 16.7)
  8   | (138.3, 26.7)   | (83.3, 16.7)
  9   | (121.6, 26.7)   | (66.6, 16.7)
  10  | (105.0, 26.7)   | (50.0, 16.7)
  11  | (88.3, 26.7)    | (33.3, 16.7)
  12  | (71.7, 26.7)    | (16.7, 16.7)
  13  | (55.0, 26.7)    | (0.0, 16.7)
  14  | (55.0, 43.3)    | (0.0, 33.3)
  15  | (71.7, 43.3)    | (16.7, 33.3)
  16  | (88.3, 43.3)    | (33.3, 33.3)
  17  | (105.0, 43.3)   | (50.0, 33.3)
  18  | (121.6, 43.3)   | (66.6, 33.3)
  19  | (138.3, 43.3)   | (83.3, 33.3)
  20  | (155.0, 43.3)   | (100.0, 33.3)
  21  | (155.0, 60.0)   | (100.0, 50.0)
  22  | (138.3, 60.0)   | (83.3, 50.0)
  23  | (121.6, 60.0)   | (66.6, 50.0)
  24  | (105.0, 60.0)   | (50.0, 50.0)
  25  | (88.3, 60.0)    | (33.3, 50.0)
  26  | (71.7, 60.0)    | (16.7, 50.0)
  27  | (55.0, 60.0)    | (0.0, 50.0)
  28  | (55.0, 76.6)    | (0.0, 66.6)
  29  | (71.7, 76.6)    | (16.7, 66.6)
  30  | (88.3, 76.6)    | (33.3, 66.6)
  31  | (105.0, 76.6)   | (50.0, 66.6)
  32  | (121.6, 76.6)   | (66.6, 66.6)
  33  | (138.3, 76.6)   | (83.3, 66.6)
  34  | (155.0, 76.6)   | (100.0, 66.6)
  35  | (155.0, 93.3)   | (100.0, 83.3)
  36  | (138.3, 93.3)   | (83.3, 83.3)
  37  | (121.6, 93.3)   | (66.6, 83.3)
  38  | (105.0, 93.3)   | (50.0, 83.3)
  39  | (88.3, 93.3)    | (33.3, 83.3)
  40  | (71.7, 93.3)    | (16.7, 83.3)
  41  | (55.0, 93.3)    | (0.0, 83.3)
  42  | (55.0, 110.0)   | (0.0, 100.0)
  43  | (71.7, 110.0)   | (16.7, 100.0)
  44  | (88.3, 110.0)   | (33.3, 100.0)
  45  | (105.0, 110.0)  | (50.0, 100.0)
  46  | (121.6, 110.0)  | (66.6, 100.0)
  47  | (138.3, 110.0)  | (83.3, 100.0)
  48  | (155.0, 110.0)  | (100.0, 100.0)
Starting heater checks for extruder
Starting heater checks for heater_bed
Stepper stepper_z1 phase change (was 254 now 253)
webhooks client 140735395929040: New connection
webhooks client 140735395929040: Client info {'program': 'Moonraker', 'version': 'v0.8.0-379-g346a3d7'}
webhooks: registering remote method 'shutdown_machine' for connection id: 140735395929040
webhooks: registering remote method 'reboot_machine' for connection id: 140735395929040
webhooks: registering remote method 'pause_job_queue' for connection id: 140735395929040
webhooks: registering remote method 'start_job_queue' for connection id: 140735395929040
Starting Klippy...
Args: ['/home/blackaxis/klipper/klippy/klippy.py', '/home/blackaxis/Ender3_data/config/printer.cfg', '-I', '/home/blackaxis/Ender3_data/comms/klippy.serial', '-l', '/home/blackaxis/Ender3_data/logs/klippy.log', '-a', '/home/blackaxis/Ender3_data/comms/klippy.sock']
Git version: 'v0.12.0-207-g6cd17420'
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.11.2 (main, Mar 13 2023, 12:18:29) [GCC 12.2.0]'
Start printer at Mon Jun 17 13:23:57 2024 (1718645037.1 25.7)
===== Config file =====
[virtual_sdcard]
path = /home/blackaxis/Ender3_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[respond]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	M400
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
	{% set retract = client.cancel_retract|default(1)|abs %}
	{% set BED_TEMP = params.BED|default(60)|float %}
	{% set TOOL_TEMP = params.EXTRUDER|default(175)|float %}
	
	{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
	else "X=" ~ client.park_at_cancel_x %}
	{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
	else "Y=" ~ client.park_at_cancel_y %}
	{% set custom_park = park_x|length > 0 or park_y|length > 0 %}
	
	
	{% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
	{% endif %}
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	{client.user_cancel_macro|default("")}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
	{% set restore = False if printer.toolhead.extruder == ''
	else True  if params.RESTORE|default(1)|int == 1 else False %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	{client.user_pause_macro|default("")}
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	{% set runout_resume = True if client.runout_sensor|default("") == ""
	else True if not printer[client.runout_sensor].enabled
	else printer[client.runout_sensor].filament_detected %}
	{% set can_extrude = True if printer.toolhead.extruder == ''
	else printer[printer.toolhead.extruder].can_extrude %}
	{% set do_resume = False %}
	{% set prompt_txt = [] %}
	
	
	{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	{% if last_extruder_temp.restore %}
	
	RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
	M109 S{last_extruder_temp.temp}
	{% set do_resume = True %}
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	{% if runout_resume %}
	{% if do_resume %}
	{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}
	{client.user_resume_macro|default("")}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
	{% endif %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
	{% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
	{% endif %}
	
	{% if not (runout_resume and do_resume) %}
	RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
	{% for element in prompt_txt %}
	RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}'
	{% endfor %}
	RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
	RESPOND TYPE=command MSG="action:prompt_show"
	{% endif %}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro PRINT_START]
gcode = 
	START_PRINT {rawparams}

[gcode_macro PRINT_END]
gcode = 
	END_PRINT {rawparams}

[gcode_macro START_PRINT]
gcode = 
	G28
	{% set BED_TEMP = params.BED|default(96)|float %}
	{% set TOOL_TEMP = params.EXTRUDER|default(200)|float %}
	M104 S{TOOL_TEMP}
	M190 S{BED_TEMP}
	M107
	
	G21
	G90
	M82
	G92 E0
	G28
	BED_MESH_CALIBRATE ADAPTIVE=1 ADAPTIVE_MARGIN=10
	G1 Z10 F3000
	M190 S{BED_TEMP}
	M109 S{TOOL_TEMP}
	G92 E0
	SKEW_PROFILE LOAD=skew_profile
	LINE_PURGE

[gcode_macro FILAMENT_START]
gcode = 
	{% set material = params.MATERIAL|default("PLA") %}
	{% set vendor = params.VENDOR|default("Unknown") %}
	{% set color = params.COLOR|default("Unknown") %}
	{% set pa_constant = {'PLA': 0.055, 'PETG': 0.055, 'ABS': 0.055, 'ASA': 0.1540, 'Nylon': 0.055, 'TPU': 0.055, 'PVB': 0.055}[material] %}
	{% set retraction_speed = {'PLA': 65, 'PETG': 65, 'ABS': 65, 'ASA': 65, 'Nylon': 65, 'TPU': 65, 'PVB': 65}[material] %}
	{% set detraction_speed = {'PLA': 65, 'PETG': 65, 'ABS': 65, 'ASA': 65, 'Nylon': 65, 'TPU': 65, 'PVB': 65}[material] %}
	{% set retraction = {'PLA': 0.4, 'PETG': 0.4, 'ABS': 0.4, 'ASA': 0.4, 'Nylon': 0.4, 'TPU': 0.4, 'PVB': 0.4}[material] %}

[gcode_macro CALCULATE_PA]
gcode = 
	{% set material = params.MATERIAL|default("PLA") %}
	{% set bowden_length = (params.BOWDEN_LENGTH|default(5.5)|float) / 10 %}
	{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}
	{% set nozzle_size = params.NOZZLE_SIZE|default(0.4)|float %}
	{% set print_speed = params.PRINT_SPEED|default(150)|float %}
	{% set material_constant = {'PLA': 100, 'PETG': 120, 'ABS': 110, 'ASA': 84, 'Nylon': 130, 'TPU': 150, 'PVB': 100}[material] %}
	{% set vfr = nozzle_size * layer_height * print_speed %}
	{% set pressure_advance = (vfr * bowden_length) / material_constant %}
	
	SET_PRESSURE_ADVANCE ADVANCE={pressure_advance}

[gcode_macro BEFORE_LAYER_CHANGE]
gcode = 
	{% set layer_num_prev = params.LAYER_NUM|default(0) %}
	{% set layer_h_prev = params.LAYER_Z|default(0)|float %}
	{% set layer_h_max = params.LAYER_MAX_Z|default(100)|float %}
	{% set material = params.MATERIAL|default("PLA") %}
	{% set nozzle_size_prev = params.NOZZLE_SIZE|default(0.4)|float %}
	{% set total_layer_count = params.TOTAL_LAYER_COUNT|default(3000)|float %}
	{% set max_print_speed = params.MAX_PRINT_SPEED|default(150)|float %}

[gcode_macro AFTER_LAYER_CHANGE]
description = After layer change housekeeping
gcode = 
	{% set layer_num_prev = params.LAYER_NUM|default(0) %}
	{% set layer_h_prev = params.LAYER_Z|default(0)|float %}
	{% set layer_h_max = params.LAYER_MAX_Z|default(100)|float %}
	{% set material = params.MATERIAL|default("PLA") %}
	{% set nozzle_size_prev = params.NOZZLE_SIZE|default(0.4)|float %}
	{% set total_layer_count = params.TOTAL_LAYER_COUNT|default(3000)|float %}
	{% set max_print_speed = params.MAX_PRINT_SPEED|default(150)|float %}

[gcode_macro END_PRINT]
gcode = 
	{% set bound = params.BOUND|default(20)|int %}
	{% set BED_MAX_X = printer.toolhead.axis_maximum.x - bound %}
	{% set BED_MAX_Y = printer.toolhead.axis_maximum.y - bound %}
	{% set BED_MAX_Z = printer.toolhead.axis_maximum.z - bound %}
	
	
	SET_SKEW CLEAR=1
	
	
	M140 S0
	M104 S0
	M106 S0
	
	G91
	G1 X-2 Y-2 E-0.8 F3000
	
	G1 Z10 F2000
	G90
	G1 X{BED_MAX_X} Y{BED_MAX_Y} F1000

[homing_override]
axes = xyz
set_position_z = 0
gcode = 
	
	{% set CURRENTLESS = 0 %}
	{% set PROBE_X = 133 %}
	{% set PROBE_Y = 110 %}
	{% set PROBE_XY_SPEED = 60 %}
	{% set MOVE_TO_PREVIOUS = False %}
	
	{% set MOVE_TO_PREV_SPEED = 50 %}
	{% set HOMING_BOUNCE = 5.0 %}
	{% set BOUNCE_SPEED = 25 %}
	{% set Z_HOP = 5 %}
	{% set Z_HOP_SPEED = 10 %}
	
	{% set X_HOMING_CUR = 1.000 %}
	{% set Y_HOMING_CUR = 1.000 %}
	{% set HOMING_ACCEL = 700 %}
	
	{% set PAUSE = 1000 %}
	
	{% set SAFETY_HOP = 5 %}
	{% set SAFETY_HOP_SPEED = 5 %}
	
	
	
	{% set cur_accel = printer.toolhead.max_accel %}
	{% set cur_accel_to_decel = printer.toolhead.max_accel_to_decel %}
	
	{% set requested = {'x': False,
	'y': False,
	'z': False} %}
	{% if   not 'X' in params
	and not 'Y' in params
	and not 'Z' in params %}
	{% set X, Y, Z = True, True, True %}
	{% else %}
	{% if 'X' in params %}
	{% set X = True %}
	{% set null = requested.update({'x': True}) %}
	{% endif %}
	{% if 'Y' in params %}
	{% set Y = True %}
	{% set null = requested.update({'y': True}) %}
	{% endif %}
	{% if 'Z' in params %}
	{% set Z = True %}
	{% set null = requested.update({'z': True}) %}
	{% endif %}
	{% endif %}
	
	
	
	
	{% if not "xyz" in printer.toolhead.homed_axes %}
	G1 Z{SAFETY_HOP} F{(SAFETY_HOP_SPEED * 60)}
	{% endif %}
	
	
	{% if MOVE_TO_PREVIOUS %}
	SAVE_GCODE_STATE NAME=homing
	{% endif %}
	
	
	{% if CURRENTLESS != 1 %}
	{% if X and Y %}
	SENSORLESS_HOME_ALL X_CUR={X_HOMING_CUR} Y_CUR={Y_HOMING_CUR} ACCEL={HOMING_ACCEL} BOUNCE={HOMING_BOUNCE} BOUNCE_SPEED={BOUNCE_SPEED} PAUSE={PAUSE}
	{% elif X %}
	SENSORLESS_HOME_X CURRENT={X_HOMING_CUR} ACCEL={HOMING_ACCEL} BOUNCE={HOMING_BOUNCE} BOUNCE_SPEED={BOUNCE_SPEED} PAUSE={PAUSE}
	{% elif Y %}
	SENSORLESS_HOME_Y CURRENT={Y_HOMING_CUR} ACCEL={HOMING_ACCEL} BOUNCE={HOMING_BOUNCE} BOUNCE_SPEED={BOUNCE_SPEED} PAUSE={PAUSE}
	{% endif %}
	{% else %}
	{% if X and Y %}
	SENSOR_HOME_ALL ACCEL={HOMING_ACCEL} BOUNCE={HOMING_BOUNCE} BOUNCE_SPEED={BOUNCE_SPEED} PAUSE={PAUSE}
	{% elif X %}
	SENSOR_HOME_X ACCEL={HOMING_ACCEL} BOUNCE={HOMING_BOUNCE} BOUNCE_SPEED={BOUNCE_SPEED} PAUSE={PAUSE}
	{% elif Y %}
	SENSOR_HOME_Y ACCEL={HOMING_ACCEL} BOUNCE={HOMING_BOUNCE} BOUNCE_SPEED={BOUNCE_SPEED} PAUSE={PAUSE}
	{% endif %}
	{% endif %}
	
	
	{% if Z %}
	G1 X{PROBE_X} Y{PROBE_Y} F{(PROBE_XY_SPEED * 60)}
	G28 Z
	G1 Z{Z_HOP} F{(Z_HOP_SPEED * 60)}
	{% endif %}
	
	
	{% if MOVE_TO_PREVIOUS %}
	{% if MOVE_TO_PREV_SPEED == 0 %}
	RESTORE_GCODE_STATE NAME=homing MOVE=1
	{% else %}
	RESTORE_GCODE_STATE NAME=homing MOVE=1 MOVE_SPEED={MOVE_TO_PREV_SPEED}
	{% endif %}
	{% endif %}
	
	
	{% if printer.toolhead.max_accel != cur_accel %}
	SET_VELOCITY_LIMIT ACCEL={cur_accel} ACCEL_TO_DECEL={cur_accel_to_decel}
	{% endif %}

[gcode_macro SENSORLESS_HOME_ALL]
description = Home XY with modified current
gcode = 
	{% set HOME_CUR_X = params.X_CUR|default(0.250)|float %}
	{% set HOME_CUR_Y = params.Y_CUR|default(0.250)|float %}
	{% set HOME_ACCEL = params.ACCEL|default(1000)|float %}
	{% set BOUNCE = params.BOUNCE|default(10)|float %}
	{% set BOUNCE_SPEED = params.BOUNCE_SPEED|default(20)|float %}
	{% set driver_config_x = printer.configfile.settings['tmc2209 stepper_x'] %}
	{% set driver_config_y = printer.configfile.settings['tmc2209 stepper_y'] %}
	{% set RUN_CUR_X = driver_config_x.run_current %}
	{% set RUN_CUR_Y = driver_config_y.run_current %}
	{% set PAUSE = params.PAUSE|default(2000)|int %}
	
	
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR_X}
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CUR_Y}
	
	SET_VELOCITY_LIMIT ACCEL={HOME_ACCEL} ACCEL_TO_DECEL={(HOME_ACCEL * 0.5)}
	
	G4 P{PAUSE}
	
	G28 X0
	{% if BOUNCE %}
	
	G91
	G1 X{BOUNCE} F{(BOUNCE_SPEED * 60)}
	G90
	{% endif %}
	
	G28 Y0
	{% if BOUNCE %}
	
	G91
	G1 Y{BOUNCE} F{(BOUNCE_SPEED * 60)}
	G90
	{% endif %}
	
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CUR_X}
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CUR_Y}
	
	G4 P{PAUSE}

[gcode_macro SENSORLESS_HOME_X]
description = Home X with modified current
gcode = 
	{% set HOME_CUR = params.CURRENT|default(0.250)|float %}
	{% set HOME_ACCEL = params.ACCEL|default(1000)|float %}
	{% set BOUNCE = params.BOUNCE|default(10)|float %}
	{% set BOUNCE_SPEED = params.BOUNCE_SPEED|default(20)|float %}
	{% set driver_config = printer.configfile.settings['tmc2209 stepper_x'] %}
	{% set RUN_CUR = driver_config.run_current %}
	{% set PAUSE = params.PAUSE|default(2000)|int %}
	
	
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR}
	
	SET_VELOCITY_LIMIT ACCEL={HOME_ACCEL} ACCEL_TO_DECEL={(HOME_ACCEL * 0.5)}
	
	G4 P{PAUSE}
	
	G28 X0
	{% if BOUNCE %}
	
	G91
	G1 X{BOUNCE} F{(BOUNCE_SPEED * 60)}
	G90
	{% endif %}
	
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CUR}
	
	G4 P{PAUSE}

[gcode_macro SENSORLESS_HOME_Y]
description = Home Y with modified current
gcode = 
	{% set HOME_CUR = params.CURRENT|default(0.250)|float %}
	{% set HOME_ACCEL = params.ACCEL|default(1000)|float %}
	{% set BOUNCE = params.BOUNCE|default(10)|float %}
	{% set BOUNCE_SPEED = params.BOUNCE_SPEED|default(20)|float %}
	{% set driver_config = printer.configfile.settings['tmc2209 stepper_y'] %}
	{% set RUN_CUR = driver_config.run_current %}
	{% set PAUSE = params.PAUSE|default(2000)|int %}
	
	
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CUR}
	
	SET_VELOCITY_LIMIT ACCEL={HOME_ACCEL} ACCEL_TO_DECEL={(HOME_ACCEL * 0.5)}
	
	G4 P{PAUSE}
	
	G28 Y0
	{% if BOUNCE %}
	
	G91
	G1 Y{BOUNCE} F{(BOUNCE_SPEED * 60)}
	G90
	{% endif %}
	
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CUR}
	
	G4 P{PAUSE}

[gcode_macro SENSOR_HOME_ALL]
description = Home XY
gcode = 
	{% set HOME_ACCEL = params.ACCEL|default(1000)|float %}
	{% set BOUNCE = params.BOUNCE|default(10)|float %}
	{% set BOUNCE_SPEED = params.BOUNCE_SPEED|default(20)|float %}
	{% set PAUSE = params.PAUSE|default(2000)|int %}
	
	
	SET_VELOCITY_LIMIT ACCEL={HOME_ACCEL} ACCEL_TO_DECEL={(HOME_ACCEL * 0.5)}
	
	G4 P{PAUSE}
	
	G28 X0
	{% if BOUNCE %}
	
	G91
	G1 X{BOUNCE} F{(BOUNCE_SPEED * 60)}
	G90
	{% endif %}
	
	G28 Y0
	{% if BOUNCE %}
	
	G91
	G1 Y{BOUNCE} F{(BOUNCE_SPEED * 60)}
	G90
	{% endif %}
	
	G4 P{PAUSE}

[gcode_macro SENSOR_HOME_X]
description = Home X
gcode = 
	{% set HOME_ACCEL = params.ACCEL|default(1000)|float %}
	{% set BOUNCE = params.BOUNCE|default(10)|float %}
	{% set BOUNCE_SPEED = params.BOUNCE_SPEED|default(20)|float %}
	{% set PAUSE = params.PAUSE|default(2000)|int %}
	
	
	SET_VELOCITY_LIMIT ACCEL={HOME_ACCEL} ACCEL_TO_DECEL={(HOME_ACCEL * 0.5)}
	
	G4 P{PAUSE}
	
	G28 X0
	{% if BOUNCE %}
	
	G91
	G1 X{BOUNCE} F{(BOUNCE_SPEED * 60)}
	G90
	{% endif %}
	
	G4 P{PAUSE}

[gcode_macro SENSOR_HOME_Y]
description = Home Y
gcode = 
	{% set HOME_ACCEL = params.ACCEL|default(1000)|float %}
	{% set BOUNCE = params.BOUNCE|default(10)|float %}
	{% set BOUNCE_SPEED = params.BOUNCE_SPEED|default(20)|float %}
	{% set PAUSE = params.PAUSE|default(2000)|int %}
	
	
	SET_VELOCITY_LIMIT ACCEL={HOME_ACCEL} ACCEL_TO_DECEL={(HOME_ACCEL * 0.5)}
	
	G4 P{PAUSE}
	
	G28 Y0
	{% if BOUNCE %}
	
	G91
	G1 Y{BOUNCE} F{(BOUNCE_SPEED * 60)}
	G90
	{% endif %}
	
	G4 P{PAUSE}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(printer.configfile.config["stepper_x"]["position_endstop"]|string)|int %}
	{% set Y = params.Y|default(printer.configfile.config["stepper_y"]["position_endstop"]|string)|int %}
	{% set Z = params.Z|default(10)|int %}
	{% set E = params.E|default(-20)|int %}
	{% set tool = params.tool|default(0)|int %}
	PAUSE
	G91
	G1 E-5 F4000
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G0 E10 F500
	G0 E{E} F600
	G92 E0

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	M400
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	M400
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.minimum_cruise_ratio}
	
	
	M400
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[gcode_macro DUMP_VARIABLES]
gcode = 
	{% set filter_name = params.NAME|default('')|string|lower %}
	{% set filter_value = params.VALUE|default('')|string|lower %}
	{% set show_cfg = params.SHOW_CFG|default(0)|int %}
	
	{% set out = [] %}
	
	{% for key1 in printer %}
	{% for key2 in printer[key1] %}
	{% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
	{% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
	{% endif %}
	{% else %}
	{% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
	{% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	{action_respond_info(out|join("\n"))}

[gcode_macro GET_VARIABLE]
gcode = 
	{% set names = (params.NAME).split('.')|list %}
	{% set join = (params.JOIN)|default(1)|int %}
	
	{% set _dummy0 = namespace( break = 0 ) %}
	{% set _dummy1 = namespace( out = printer[names|first] ) %}
	
	{% for name in names if _dummy0.break == 0 %}
	{% if loop.index > 1 %}
	{% if name in _dummy1.out %}
	{% set _dummy1.out = _dummy1.out[name] %}
	{% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
	{% set _dummy1.out = _dummy1.out[name|int] %}
	{% else %}
	{% set _dummy0.break = loop.index0 %}
	{% endif %}
	{% endif %}
	{% endfor %}
	
	{% if _dummy1.out is boolean %}
	{ action_respond_info('Type: boolean') }
	{% elif _dummy1.out is float %}
	{ action_respond_info('Type: float') }
	{% elif _dummy1.out is integer %}
	{ action_respond_info('Type: integer') }
	{% elif _dummy1.out is mapping %}
	{ action_respond_info('Type: mapping') }
	{% elif _dummy1.out is string %}
	{ action_respond_info('Type: string') }
	{% elif _dummy1.out is iterable %}
	{ action_respond_info('Type: iterable') }
	{% elif _dummy1.out is none %}
	{ action_respond_info('Type: none') }
	{% elif _dummy1.out is undefined %}
	{ action_respond_info('Type: undefined') }
	{% elif _dummy1.out is callable %}
	{ action_respond_info('Type: callable') }
	{% else %}
	{ action_respond_info('Type: unknown') }
	{% endif %}
	
	{% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
	{ action_respond_info('%s' % _dummy1.out|join("\n")) }
	{% else %}
	{ action_respond_info('%s' % _dummy1.out) }
	{% endif %}
	
	{% if _dummy0.break != 0 %}
	{ action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
	{% endif %}

[gcode_macro M109]
rename_existing = M99109
gcode = 
	
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro M190]
rename_existing = M99190
gcode = 
	
	{% set s = params.S|float %}
	
	M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[save_variables]
filename = ender3_variables.cfg

[exclude_object]

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}
	{% set attach_macro = kamp_settings.attach_macro | string %}
	{% set detach_macro = kamp_settings.detach_macro | string %}
	{% set mesh_margin = kamp_settings.mesh_margin | float %}
	{% set fuzz_amount = kamp_settings.fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	{% if printer.exclude_object.objects != [] %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% else %}
	
	{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}
	G4 P5000
	{% endif %}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 0
variable_fuzz_amount = 0
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 20
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[idle_timeout]
timeout = 1800

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32f103xe_37FFDD054253373706802457-if00

[board_pins]
aliases = 
	EXP1_1=<5V>,EXP1_2=<GND>,EXP1_3=PB15,EXP1_4=PB8,EXP1_5=PB9,
	EXP1_6=PA10,EXP1_7=<RESET>,EXP1_8=PA9,EXP1_9=PA15,EXP1_10=PB5,

[mcu EBB]
canbus_uuid = 44886b422df2

[printer]
kinematics = cartesian
max_velocity = 500
max_accel = 1500
minimum_cruise_ratio = 0.4
square_corner_velocity = 5
max_z_accel = 42

[skew_correction]

[screws_tilt_adjust]
screw1 = 40, 180
screw1_name = Back_L
screw2 = 175, 180
screw2_name = Back_R
screw3 = 40, 21
screw3_name = Front_L
screw4 = 175, 21
screw4_name = Front_R
speed = 50
horizontal_move_z = 20

[z_tilt]
z_positions = -40, 200
	198,200
points = 40, 198
	40, 198
	40, 21
	172, 21
speed = 50
horizontal_move_z = 5

[bed_screws]
screw1 = 40, 170
screw1_name = Back_L
screw2 = 172, 170
screw2_name = Back_R
screw3 = 40, 21
screw3_name = Front_L
screw4 = 172, 21
screw4_name = Front_R
speed = 50
horizontal_move_z = 20

[bltouch]
stow_on_each_sample = false
probe_with_touch_mode = true
sensor_pin = ^EBB: PB8
control_pin = EBB: PB9
pin_move_time = 0.5
x_offset = -55
y_offset = -10
speed = 8
lift_speed = 7
samples_tolerance = 0.01
samples = 3
sample_retract_dist = 3
samples_tolerance_retries = 5
z_offset = 0.425

[bed_mesh]
adaptive_margin = 5
speed = 1000
horizontal_move_z = 3
mesh_min = 0, 0
mesh_max = 100, 100
probe_count = 7, 7
algorithm = bicubic

[homing_heaters]
heaters = extruder, heater_bed

[stepper_x]
step_pin = PB13
dir_pin = !PB12
enable_pin = !PB14
endstop_pin = tmc2209_stepper_x:virtual_endstop
microsteps = 64
homing_retract_dist = 0
rotation_distance = 40
position_endstop = 0
position_min = 0
position_max = 180
homing_speed = 60

[tmc2209 stepper_x]
uart_pin = PC11
tx_pin = PC10
diag_pin = ^PC0
uart_address = 0
interpolate = false
run_current = 0.88
driver_sgthrs = 95

[stepper_y]
step_pin = PB10
dir_pin = !PB2
enable_pin = !PB11
endstop_pin = tmc2209_stepper_y:virtual_endstop
homing_retract_dist = 0
microsteps = 64
rotation_distance = 40
position_min = 0
position_endstop = 0
position_max = 185
homing_speed = 65

[tmc2209 stepper_y]
uart_pin = PC11
tx_pin = PC10
diag_pin = ^PC1
interpolate = false
uart_address = 2
run_current = 0.7
driver_sgthrs = 100

[stepper_z]
step_pin = PB0
dir_pin = PC5
enable_pin = !PB1
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
microsteps = 64
position_max = 230
position_min = -5
homing_speed = 5

[tmc2209 stepper_z]
uart_pin = PC11
tx_pin = PC10
uart_address = 1
interpolate = false
run_current = .88

[stepper_z1]
step_pin = PB3
dir_pin = !PB4
enable_pin = !PD2
rotation_distance = 8
microsteps = 64

[tmc2209 stepper_z1]
uart_pin = PC11
tx_pin = PC10
uart_address = 3
interpolate = false
run_current = .88

[extruder]
step_pin = EBB: PD0
dir_pin = EBB: PD1
enable_pin = !EBB: PD2
microsteps = 64
rotation_distance = 23.003
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = EBB: PB13
sensor_type = Generic 3950
sensor_pin = EBB: PA3
min_temp = 0
max_temp = 300
max_extrude_cross_section = 5
pid_kp = 22.616
pid_ki = 1.311
pid_kd = 97.530
control = pid

[firmware_retraction]
retract_length = 0.4
retract_speed = 80
unretract_extra_length = 0
unretract_speed = 80

[gcode_arcs]
resolution = 1.0

[tmc2209 extruder]
uart_pin = EBB: PA15
run_current = 0.8
interpolate = false

[verify_heater extruder]
max_error = 240
check_gain_time = 60

[verify_heater heater_bed]
check_gain_time = 120
hysteresis = 5
heating_gain = 1

[heater_bed]
heater_pin = PC9
sensor_type = Generic 3950
sensor_pin = PC3
min_temp = 0
max_temp = 130
control = pid
pid_kp = 67.317
pid_ki = 1.506
pid_kd = 752.271

[heater_fan nozzle_cooling_fan]
pin = EBB: PA1
heater = extruder
heater_temp = 50.0

[fan]
pin = EBB: PA0

[static_digital_output usb_pullup_enable]
pins = !PA14

[neopixel my_neopixel]
pin = PA8
chain_count = 18
initial_red = 1
initial_green = 1
initial_blue = 1

[neopixel hotend_rgb]
pin = EBB: PD3

[adxl345]
cs_pin = EBB: PB12
spi_software_sclk_pin = EBB: PB10
spi_software_mosi_pin = EBB: PB11
spi_software_miso_pin = EBB: PB2
axes_map = x,y,z

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor EBB]
sensor_type = temperature_mcu
sensor_mcu = EBB
min_temp = 0
max_temp = 160

[bed_mesh default]
version = 1
points = 
	0.050417, 0.164583, 0.165000
	0.003125, 0.060000, 0.053125
	-0.038958, 0.002917, -0.110000
tension = 0.2
min_x = 82.61000000000001
algo = lagrange
y_count = 3
mesh_y_pps = 2
min_y = 69.21
x_count = 3
max_y = 99.99
mesh_x_pps = 2
max_x = 97.38999999999999

[skew_correction my_skew_profile]
xy_skew = -0.003552463343554649
xz_skew = 0.0
yz_skew = 0.0

[skew_correction skew_profile]
xy_skew = -0.005919001874824016
xz_skew = 0.0
yz_skew = 0.0
=======================
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting serial connect
mcu 'mcu': got {'oid': 11, 'next_clock': 3174309760, 'value': 31398, '#name': 'analog_in_state', '#sent_time': 29.844969519, '#receive_time': 29.863245649}
Loaded MCU 'mcu' 112 commands (v0.12.0-61-gb50d6669 / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.34-4+rpi1+14) 2.34)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1=PB6,PB7 BUS_PINS_i2c1a=PB8,PB9 BUS_PINS_i2c2=PB10,PB11 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=72000000 INITIAL_PINS=!PA14 MCU=stm32f103xe PWM_MAX=255 RESERVE_PINS_USB=PA11,PA12 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu 'mcu': got {'oid': 11, 'next_clock': 3195909760, 'value': 31392, '#name': 'analog_in_state', '#sent_time': 29.999937149, '#receive_time': 30.163259982}
mcu 'mcu': got {'oid': 11, 'next_clock': 3217509760, 'value': 31382, '#name': 'analog_in_state', '#sent_time': 29.999937149, '#receive_time': 30.463263093}
mcu 'mcu': got {'oid': 11, 'next_clock': 3239109760, 'value': 31387, '#name': 'analog_in_state', '#sent_time': 29.999937149, '#receive_time': 30.763276722}
mcu 'mcu': got {'oid': 11, 'next_clock': 3260709760, 'value': 31390, '#name': 'analog_in_state', '#sent_time': 29.999937149, '#receive_time': 31.063279259}
mcu 'mcu': got {'oid': 11, 'next_clock': 3282309760, 'value': 31392, '#name': 'analog_in_state', '#sent_time': 29.999937149, '#receive_time': 31.363296481}
mcu 'mcu': got {'oid': 11, 'next_clock': 3303909760, 'value': 31389, '#name': 'analog_in_state', '#sent_time': 29.999937149, '#receive_time': 31.663307611}
mcu 'mcu': got {'oid': 11, 'next_clock': 3325509760, 'value': 31390, '#name': 'analog_in_state', '#sent_time': 29.999937149, '#receive_time': 31.96331711}
mcu 'mcu': got {'oid': 11, 'next_clock': 3347109760, 'value': 31403, '#name': 'analog_in_state', '#sent_time': 29.999937149, '#receive_time': 32.263330388}
mcu 'EBB': Starting CAN connect
Created a socket
mcu 'mcu': got {'oid': 11, 'next_clock': 3368709760, 'value': 31397, '#name': 'analog_in_state', '#sent_time': 32.405728721, '#receive_time': 32.56335948}
mcu 'EBB': got {'oid': 10, 'next_clock': 3517575775, 'value': 7797, '#name': 'analog_in_state', '#sent_time': 32.833838999, '#receive_time': 32.857768738999994}
mcu 'mcu': got {'oid': 11, 'next_clock': 3390309760, 'value': 31390, '#name': 'analog_in_state', '#sent_time': 32.405728721, '#receive_time': 32.863345239}
mcu 'EBB': got {'oid': 11, 'next_clock': 3518215775, 'value': 31393, '#name': 'analog_in_state', '#sent_time': 32.833838999, '#receive_time': 32.867779073}
Loaded MCU 'EBB' 108 commands (v0.12.0-102-g9f41f53c / gcc: (15:12.2.rel1-1) 12.2.1 20221205 binutils: (2.40-2+18+b1) 2.40)
MCU 'EBB' config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CANBUS_FREQUENCY=500000 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_CAN=PB0,PB1 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu_temperature 'EBB' nominal base=-269.710145 slope=1305.652174
Configured MCU 'mcu' (1024 moves)
Configured MCU 'EBB' (1024 moves)
bed_mesh: generated points
Index |  Tool Adjusted  |   Probe
  0   | (55.0, 10.0)    | (0.0, 0.0)
  1   | (71.7, 10.0)    | (16.7, 0.0)
  2   | (88.3, 10.0)    | (33.3, 0.0)
  3   | (105.0, 10.0)   | (50.0, 0.0)
  4   | (121.6, 10.0)   | (66.6, 0.0)
  5   | (138.3, 10.0)   | (83.3, 0.0)
  6   | (155.0, 10.0)   | (100.0, 0.0)
  7   | (155.0, 26.7)   | (100.0, 16.7)
  8   | (138.3, 26.7)   | (83.3, 16.7)
  9   | (121.6, 26.7)   | (66.6, 16.7)
  10  | (105.0, 26.7)   | (50.0, 16.7)
  11  | (88.3, 26.7)    | (33.3, 16.7)
  12  | (71.7, 26.7)    | (16.7, 16.7)
  13  | (55.0, 26.7)    | (0.0, 16.7)
  14  | (55.0, 43.3)    | (0.0, 33.3)
  15  | (71.7, 43.3)    | (16.7, 33.3)
  16  | (88.3, 43.3)    | (33.3, 33.3)
  17  | (105.0, 43.3)   | (50.0, 33.3)
  18  | (121.6, 43.3)   | (66.6, 33.3)
  19  | (138.3, 43.3)   | (83.3, 33.3)
  20  | (155.0, 43.3)   | (100.0, 33.3)
  21  | (155.0, 60.0)   | (100.0, 50.0)
  22  | (138.3, 60.0)   | (83.3, 50.0)
  23  | (121.6, 60.0)   | (66.6, 50.0)
  24  | (105.0, 60.0)   | (50.0, 50.0)
  25  | (88.3, 60.0)    | (33.3, 50.0)
  26  | (71.7, 60.0)    | (16.7, 50.0)
  27  | (55.0, 60.0)    | (0.0, 50.0)
  28  | (55.0, 76.6)    | (0.0, 66.6)
  29  | (71.7, 76.6)    | (16.7, 66.6)
  30  | (88.3, 76.6)    | (33.3, 66.6)
  31  | (105.0, 76.6)   | (50.0, 66.6)
  32  | (121.6, 76.6)   | (66.6, 66.6)
  33  | (138.3, 76.6)   | (83.3, 66.6)
  34  | (155.0, 76.6)   | (100.0, 66.6)
  35  | (155.0, 93.3)   | (100.0, 83.3)
  36  | (138.3, 93.3)   | (83.3, 83.3)
  37  | (121.6, 93.3)   | (66.6, 83.3)
  38  | (105.0, 93.3)   | (50.0, 83.3)
  39  | (88.3, 93.3)    | (33.3, 83.3)
  40  | (71.7, 93.3)    | (16.7, 83.3)
  41  | (55.0, 93.3)    | (0.0, 83.3)
  42  | (55.0, 110.0)   | (0.0, 100.0)
  43  | (71.7, 110.0)   | (16.7, 100.0)
  44  | (88.3, 110.0)   | (33.3, 100.0)
  45  | (105.0, 110.0)  | (50.0, 100.0)
  46  | (121.6, 110.0)  | (66.6, 100.0)
  47  | (138.3, 110.0)  | (83.3, 100.0)
  48  | (155.0, 110.0)  | (100.0, 100.0)
Starting heater checks for extruder
Starting heater checks for heater_bed
webhooks client 140735971835856: New connection
webhooks client 140735971835856: Client info {'program': 'Moonraker', 'version': 'v0.8.0-379-g346a3d7'}
webhooks: registering remote method 'shutdown_machine' for connection id: 140735971835856
webhooks: registering remote method 'reboot_machine' for connection id: 140735971835856
webhooks: registering remote method 'pause_job_queue' for connection id: 140735971835856
webhooks: registering remote method 'start_job_queue' for connection id: 140735971835856
